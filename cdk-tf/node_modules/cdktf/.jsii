{
  "author": {
    "name": "HashiCorp",
    "roles": [
      "author"
    ],
    "url": "https://hashicorp.com"
  },
  "bundled": {
    "archiver": "5.3.1",
    "json-stable-stringify": "^1.0.2",
    "semver": "^7.5.3"
  },
  "dependencies": {
    "constructs": "^10.0.25"
  },
  "dependencyClosure": {
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Cloud Development Kit for Terraform",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/hashicorp/terraform-cdk",
  "jsiiVersion": "5.1.10",
  "keywords": [
    "cdk",
    "cdktf",
    "terraform"
  ],
  "license": "MPL-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "cdktf",
  "readme": {
    "markdown": "# cdktf\n\ncdktf is a framework for defining cloud infrastructure using Terraform providers and modules. It allows for\nusers to define infrastructure resources using higher-level programming languages.\n\n## Build\n\nInstall dependencies\n\n```bash\nyarn install\n```\n\nBuild the package\n\n```bash\nyarn build\n```\n\n[Learn More](https://cdk.tf/docs)\n"
  },
  "repository": {
    "directory": "packages/cdktf",
    "type": "git",
    "url": "https://github.com/hashicorp/terraform-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "cdktf.testingMatchers": {
      "locationInModule": {
        "filename": "lib/index.ts",
        "line": 17
      },
      "symbolId": "lib/testing/matchers:"
    }
  },
  "targets": {
    "dotnet": {
      "namespace": "HashiCorp.Cdktf",
      "packageId": "HashiCorp.Cdktf"
    },
    "go": {
      "moduleName": "github.com/hashicorp/terraform-cdk-go",
      "packageName": "cdktf"
    },
    "java": {
      "maven": {
        "artifactId": "cdktf",
        "groupId": "com.hashicorp"
      },
      "package": "com.hashicorp.cdktf"
    },
    "js": {
      "npm": "cdktf"
    },
    "python": {
      "distName": "cdktf",
      "module": "cdktf"
    }
  },
  "types": {
    "cdktf.AnnotationMetadataEntryType": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnnotationMetadataEntryType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/annotations.ts",
        "line": 8
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "WARN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ERROR"
        }
      ],
      "name": "AnnotationMetadataEntryType",
      "symbolId": "lib/annotations:AnnotationMetadataEntryType"
    },
    "cdktf.Annotations": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Includes API for attaching annotations such as warning messages to constructs."
      },
      "fqn": "cdktf.Annotations",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/annotations.ts",
        "line": 20
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the annotations API for a construct scope."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 25
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The scope."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.Annotations"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "The toolkit will fail synthesis when errors are reported.",
            "stability": "experimental",
            "summary": "Adds an { \"error\": <message> } metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 67
          },
          "name": "addError",
          "parameters": [
            {
              "docs": {
                "summary": "The error message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The CLI will display the info message when apps are synthesized.",
            "stability": "experimental",
            "summary": "Adds an info metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 58
          },
          "name": "addInfo",
          "parameters": [
            {
              "docs": {
                "summary": "The info message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The CLI will display the warning when an app is synthesized.\nIn a future release the CLI might introduce a --strict flag which\nwill then fail the synthesis if it encounters a warning.",
            "stability": "experimental",
            "summary": "Adds a warning metadata entry to this construct."
          },
          "locationInModule": {
            "filename": "lib/annotations.ts",
            "line": 47
          },
          "name": "addWarning",
          "parameters": [
            {
              "docs": {
                "summary": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Annotations",
      "symbolId": "lib/annotations:Annotations"
    },
    "cdktf.AnyListList": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnyListList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 370
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 369
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 378
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "AnyListList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 372
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 371
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 373
          },
          "name": "wrapsSet",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:AnyListList"
    },
    "cdktf.AnyListMap": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexMap",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnyListMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 646
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 645
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 653
          },
          "name": "get",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "AnyListMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 648
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 647
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:AnyListMap"
    },
    "cdktf.AnyMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnyMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 187
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 186
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 202
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 194
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "AnyMap",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 189
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 188
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:AnyMap"
    },
    "cdktf.AnyMapList": {
      "assembly": "cdktf",
      "base": "cdktf.MapList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AnyMapList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 578
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 577
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 586
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.AnyMap"
            }
          }
        }
      ],
      "name": "AnyMapList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 580
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 579
          },
          "name": "terraformResource",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 581
          },
          "name": "wrapsSet",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:AnyMapList"
    },
    "cdktf.App": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a cdktf application."
      },
      "fqn": "cdktf.App",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines an app."
        },
        "locationInModule": {
          "filename": "lib/app.ts",
          "line": 78
        },
        "parameters": [
          {
            "docs": {
              "summary": "configuration."
            },
            "name": "config",
            "optional": true,
            "type": {
              "fqn": "cdktf.AppConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 51
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 102
          },
          "name": "isApp",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 106
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources."
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 160
          },
          "name": "crossStackReference",
          "parameters": [
            {
              "name": "fromStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            },
            {
              "name": "toStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            },
            {
              "name": "identifier",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes all resources to the output directory."
          },
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 130
          },
          "name": "synth"
        }
      ],
      "name": "App",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 62
          },
          "name": "manifest",
          "type": {
            "fqn": "cdktf.Manifest"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The output directory into which resources will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 55
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether to skip backend validation during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 72
          },
          "name": "skipBackendValidation",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether to skip all validations during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 67
          },
          "name": "skipValidation",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "If not set, all stacks will be synthesized.",
            "stability": "experimental",
            "summary": "The stack which will be synthesized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 60
          },
          "name": "targetStackId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/app:App"
    },
    "cdktf.AppConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AppConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/app.ts",
        "line": 13
      },
      "name": "AppConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no additional context",
            "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`.",
            "stability": "experimental",
            "summary": "Additional context values for the application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 31
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "stability": "experimental",
            "summary": "The directory to output Terraform resources."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 19
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Whether to skip backend validation during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 45
          },
          "name": "skipBackendValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Whether to skip all validations during synthesis of the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 38
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/app.ts",
            "line": 20
          },
          "name": "stackTraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/app:AppConfig"
    },
    "cdktf.ArtifactoryBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.ArtifactoryBackend",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ArtifactoryBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 26
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 22
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ArtifactoryBackend",
      "symbolId": "lib/backends/artifactory-backend:ArtifactoryBackend"
    },
    "cdktf.ArtifactoryBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.",
        "remarks": "Generic HTTP repositories are supported, and state from different configurations\nmay be kept at different subpaths within the repository.\n\nNote: The URL must include the path to the Artifactory installation.\nIt will likely end in /artifactory.\n\nThis backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/v1.2.x/settings/backends/artifactory",
        "stability": "deprecated",
        "summary": "Stores the state as an artifact in a given repository in Artifactory."
      },
      "fqn": "cdktf.ArtifactoryBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 62
      },
      "name": "ArtifactoryBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) - The password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 70
          },
          "name": "password",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) - The repository name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 80
          },
          "name": "repo",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) - Path within the repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 84
          },
          "name": "subpath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note that this is the base url to artifactory not the full repo and subpath.",
            "stability": "deprecated",
            "summary": "(Required) - The URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 76
          },
          "name": "url",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) - The username."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/artifactory-backend.ts",
            "line": 66
          },
          "name": "username",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/artifactory-backend:ArtifactoryBackendConfig"
    },
    "cdktf.Aspects": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis."
      },
      "fqn": "cdktf.Aspects",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/aspect.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the `Aspects` object associated with a construct scope."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 28
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "The scope for which these aspects will apply."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.Aspects"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an aspect to apply this scope before synthesis."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 52
          },
          "name": "add",
          "parameters": [
            {
              "docs": {
                "summary": "The aspect to add."
              },
              "name": "aspect",
              "type": {
                "fqn": "cdktf.IAspect"
              }
            }
          ]
        }
      ],
      "name": "Aspects",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The list of aspects which were directly applied on this scope."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 59
          },
          "name": "all",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IAspect"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/aspect:Aspects"
    },
    "cdktf.AssetType": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AssetType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 25
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "FILE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DIRECTORY"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ARCHIVE"
        }
      ],
      "name": "AssetType",
      "symbolId": "lib/terraform-asset:AssetType"
    },
    "cdktf.AzurermBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.AzurermBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.AzurermBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "AzurermBackend",
      "symbolId": "lib/backends/azurerm-backend:AzurermBackend"
    },
    "cdktf.AzurermBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "This backend supports state locking and consistency checking\nwith Azure Blob Storage native capabilities.\n\nNote: By default the Azure Backend uses ADAL for authentication which is deprecated\nin favour of MSAL - MSAL can be used by setting use_microsoft_graph to true.\nThe default for this will change in Terraform 1.2,\nso that MSAL authentication is used by default.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/azurerm",
        "stability": "experimental",
        "summary": "Stores the state as a Blob with the given Key within the Blob Container within the Blob Storage Account."
      },
      "fqn": "cdktf.AzurermBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 58
      },
      "name": "AzurermBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) The Name of the Storage Container within the Storage Account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 66
          },
          "name": "containerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 71
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) The Name of the Storage Account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 62
          },
          "name": "storageAccountName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable.",
            "stability": "experimental",
            "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 121
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 141
          },
          "name": "clientCertificatePassword",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 147
          },
          "name": "clientCertificatePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The Client ID of the Service Principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 130
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The Client Secret of the Service Principal."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 135
          },
          "name": "clientSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "NOTE: An endpoint should only be configured when using Azure Stack.",
            "stability": "experimental",
            "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 84
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\n Possible values are public, china, german, stack and usgovernment. Defaults to public.",
            "stability": "experimental",
            "summary": "(Optional) The Azure Environment which should be used."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 77
          },
          "name": "environment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 106
          },
          "name": "msiEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables.",
            "stability": "experimental",
            "summary": "(Optional) The bearer token for the request to the OIDC provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 171
          },
          "name": "oidcRequestToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables.",
            "stability": "experimental",
            "summary": "(Optional) The URL for the OIDC provider from which to request an ID token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 165
          },
          "name": "oidcRequestUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 125
          },
          "name": "resourceGroupName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The SAS Token used to access the Blob Storage Account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 116
          },
          "name": "sasToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 90
          },
          "name": "snapshot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The Subscription ID in which the Storage Account exists."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 95
          },
          "name": "subscriptionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The Tenant ID in which the Subscription exists."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 100
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned.",
            "stability": "experimental",
            "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 188
          },
          "name": "useAzureadAuth",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL.",
            "stability": "experimental",
            "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 159
          },
          "name": "useMicrosoftGraph",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the ARM_USE_MSI environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Should Managed Service Identity authentication be used?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 111
          },
          "name": "useMsi",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default).",
            "stability": "experimental",
            "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/azurerm-backend.ts",
            "line": 179
          },
          "name": "useOidc",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/backends/azurerm-backend:AzurermBackendConfig"
    },
    "cdktf.BooleanList": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 299
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 298
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 307
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "BooleanList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 301
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 300
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 302
          },
          "name": "wrapsSet",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanList"
    },
    "cdktf.BooleanListList": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanListList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 352
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 351
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 360
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "BooleanListList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 354
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 353
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 355
          },
          "name": "wrapsSet",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanListList"
    },
    "cdktf.BooleanListMap": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexMap",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanListMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 629
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 628
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 636
          },
          "name": "get",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "BooleanListMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 631
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 630
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanListMap"
    },
    "cdktf.BooleanMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 165
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 161
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 178
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 172
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "BooleanMap",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 167
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 166
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanMap"
    },
    "cdktf.BooleanMapList": {
      "assembly": "cdktf",
      "base": "cdktf.MapList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.BooleanMapList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 563
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 562
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 571
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.BooleanMap"
            }
          }
        }
      ],
      "name": "BooleanMapList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 565
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 564
          },
          "name": "terraformResource",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 566
          },
          "name": "wrapsSet",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:BooleanMapList"
    },
    "cdktf.CloudBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental",
        "summary": "The Cloud Backend synthesizes a {@link https://developer.hashicorp.com/terraform/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings."
      },
      "fqn": "cdktf.CloudBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cloud-backend.ts",
          "line": 29
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.CloudBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cloud-backend.ts",
        "line": 28
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 65
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 58
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 53
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformBackend",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 45
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformBackend",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "CloudBackend",
      "symbolId": "lib/backends/cloud-backend:CloudBackend"
    },
    "cdktf.CloudBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "https://developer.hashicorp.com/terraform/cli/cloud/settings#arguments",
        "stability": "experimental",
        "summary": "The Cloud Backend synthesizes a {@link https://developer.hashicorp.com/terraform/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings."
      },
      "fqn": "cdktf.CloudBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cloud-backend.ts",
        "line": 96
      },
      "name": "CloudBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the organization containing the workspace(s) the current configuration should use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 100
          },
          "name": "organization",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The workspaces block must contain exactly one of the following arguments, each denoting a strategy for how workspaces should be mapped:",
            "stability": "experimental",
            "summary": "A nested block that specifies which remote Terraform Cloud workspaces to use for the current configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 106
          },
          "name": "workspaces",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "cdktf.NamedCloudWorkspace"
                },
                {
                  "fqn": "cdktf.TaggedCloudWorkspaces"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "app.terraform.io",
            "stability": "experimental",
            "summary": "The hostname of a Terraform Enterprise installation, if using Terraform Enterprise."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 113
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "We recommend omitting the token from the configuration, and instead using terraform login or manually configuring credentials in the CLI config file.",
            "stability": "experimental",
            "summary": "The token used to authenticate with Terraform Cloud."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 119
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/cloud-backend:CloudBackendConfig"
    },
    "cdktf.CloudWorkspace": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "A cloud workspace can either be a single named workspace, or a list of tagged workspaces."
      },
      "fqn": "cdktf.CloudWorkspace",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cloud-backend.ts",
        "line": 125
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 126
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "CloudWorkspace",
      "symbolId": "lib/backends/cloud-backend:CloudWorkspace"
    },
    "cdktf.ComplexComputedList": {
      "assembly": "cdktf",
      "docs": {
        "deprecated": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future",
        "stability": "deprecated"
      },
      "fqn": "cdktf.ComplexComputedList",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 214
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "complexComputedListIndex",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "optional": true,
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IInterpolatingParent",
        "cdktf.IResolvable",
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 213
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 243
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 99
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 71
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 93
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 67
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 63
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 75
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 87
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 59
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 81
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 226
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.IInterpolatingParent",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "deprecated",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ComplexComputedList",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "deprecated",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 217
          },
          "name": "complexComputedListIndex",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 216
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 215
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 218
          },
          "name": "wrapsSet",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexComputedList"
    },
    "cdktf.ComplexList": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 270
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 266
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 278
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ComplexList",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 272
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 271
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 273
          },
          "name": "wrapsSet",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexList"
    },
    "cdktf.ComplexMap": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 391
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 387
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 398
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 404
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ComplexMap",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 393
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 392
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexMap"
    },
    "cdktf.ComplexObject": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ComplexObject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 421
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "set to true if this item is from inside a set and needs tolist() for accessing it set to \"0\" for single list items."
            },
            "name": "complexObjectIsFromSet",
            "type": {
              "primitive": "boolean"
            }
          },
          {
            "docs": {
              "summary": "the index of the complex object in a list."
            },
            "name": "complexObjectIndex",
            "optional": true,
            "type": {
              "union": {
                "types": [
                  {
                    "primitive": "string"
                  },
                  {
                    "primitive": "number"
                  }
                ]
              }
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IInterpolatingParent",
        "cdktf.IResolvable",
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 413
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 455
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 99
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 71
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 93
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 67
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 63
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 75
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 87
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 59
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 81
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 449
          },
          "name": "interpolationAsList",
          "protected": true,
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 430
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.IInterpolatingParent",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ComplexObject",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "set to true if this item is from inside a set and needs tolist() for accessing it set to \"0\" for single list items."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 424
          },
          "name": "complexObjectIsFromSet",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 423
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 422
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the index of the complex object in a list."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 425
          },
          "name": "complexObjectIndex",
          "optional": true,
          "protected": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "primitive": "number"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:ComplexObject"
    },
    "cdktf.ConsulBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ConsulBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.ConsulBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "ConsulBackend",
      "symbolId": "lib/backends/consul-backend:ConsulBackend"
    },
    "cdktf.ConsulBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "Read more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/consul",
        "stability": "experimental",
        "summary": "Stores the state in the Consul KV store at a given path. This backend supports state locking."
      },
      "fqn": "cdktf.ConsulBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 50
      },
      "name": "ConsulBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) Access token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 58
          },
          "name": "accessToken",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) Path in the Consul KV store."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 54
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to the local agent HTTP listener.",
            "stability": "experimental",
            "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 63
          },
          "name": "address",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 93
          },
          "name": "caFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "requires use of key_file.",
            "stability": "experimental",
            "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 98
          },
          "name": "certFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to that of the agent.",
            "stability": "experimental",
            "summary": "(Optional) The datacenter to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 72
          },
          "name": "datacenter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 82
          },
          "name": "gzip",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 77
          },
          "name": "httpAuth",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 102
          },
          "name": "keyFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking.",
            "stability": "experimental",
            "summary": "(Optional) false to disable locking."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 88
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true.",
            "stability": "experimental",
            "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/consul-backend.ts",
            "line": 68
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/consul-backend:ConsulBackendConfig"
    },
    "cdktf.CosBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.CosBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.CosBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CosBackend",
      "symbolId": "lib/backends/cos-backend:CosBackend"
    },
    "cdktf.CosBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "This backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the COS bucket to allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/cos",
        "stability": "experimental",
        "summary": "Stores the state as an object in a configurable prefix in a given bucket on Tencent Cloud Object Storage (COS)."
      },
      "fqn": "cdktf.CosBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 54
      },
      "name": "CosBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "You shall manually create it first.",
            "stability": "experimental",
            "summary": "(Required) The name of the COS bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 73
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to private.",
            "stability": "experimental",
            "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 91
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file.",
            "stability": "experimental",
            "summary": "(Optional) Whether to enable server side encryption of the state file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 86
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to terraform.tfstate.",
            "stability": "experimental",
            "summary": "(Optional) The path for saving the state file in bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 81
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Default to \"env:\".",
            "stability": "experimental",
            "summary": "(Optional) The directory for saving the state file in bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 77
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It supports environment variables TENCENTCLOUD_REGION.",
            "stability": "experimental",
            "summary": "(Optional) The region of the COS bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 69
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID.",
            "stability": "experimental",
            "summary": "(Optional) Secret id of Tencent Cloud."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 59
          },
          "name": "secretId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY.",
            "stability": "experimental",
            "summary": "(Optional) Secret key of Tencent Cloud."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/cos-backend.ts",
            "line": 64
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/cos-backend:CosBackendConfig"
    },
    "cdktf.DataTerraformRemoteState": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 40
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 39
      },
      "name": "DataTerraformRemoteState",
      "symbolId": "lib/backends/remote-backend:DataTerraformRemoteState"
    },
    "cdktf.DataTerraformRemoteStateArtifactory": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/artifactory-backend.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 38
      },
      "name": "DataTerraformRemoteStateArtifactory",
      "symbolId": "lib/backends/artifactory-backend:DataTerraformRemoteStateArtifactory"
    },
    "cdktf.DataTerraformRemoteStateArtifactoryConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the artifactory backend. Terraform deprecated artifactory in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ArtifactoryBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/artifactory-backend.ts",
        "line": 90
      },
      "name": "DataTerraformRemoteStateArtifactoryConfig",
      "symbolId": "lib/backends/artifactory-backend:DataTerraformRemoteStateArtifactoryConfig"
    },
    "cdktf.DataTerraformRemoteStateAzurerm": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/azurerm-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStateAzurerm",
      "symbolId": "lib/backends/azurerm-backend:DataTerraformRemoteStateAzurerm"
    },
    "cdktf.DataTerraformRemoteStateAzurermConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.AzurermBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/azurerm-backend.ts",
        "line": 191
      },
      "name": "DataTerraformRemoteStateAzurermConfig",
      "symbolId": "lib/backends/azurerm-backend:DataTerraformRemoteStateAzurermConfig"
    },
    "cdktf.DataTerraformRemoteStateConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 11
      },
      "name": "DataTerraformRemoteStateConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 13
          },
          "name": "defaults",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 12
          },
          "name": "workspace",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-remote-state:DataTerraformRemoteStateConfig"
    },
    "cdktf.DataTerraformRemoteStateConsul": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsul",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/consul-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConsulConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStateConsul",
      "symbolId": "lib/backends/consul-backend:DataTerraformRemoteStateConsul"
    },
    "cdktf.DataTerraformRemoteStateConsulConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.ConsulBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/consul-backend.ts",
        "line": 105
      },
      "name": "DataTerraformRemoteStateConsulConfig",
      "symbolId": "lib/backends/consul-backend:DataTerraformRemoteStateConsulConfig"
    },
    "cdktf.DataTerraformRemoteStateCos": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCos",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cos-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateCosConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStateCos",
      "symbolId": "lib/backends/cos-backend:DataTerraformRemoteStateCos"
    },
    "cdktf.DataTerraformRemoteStateCosConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.CosBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/cos-backend.ts",
        "line": 94
      },
      "name": "DataTerraformRemoteStateCosConfig",
      "symbolId": "lib/backends/cos-backend:DataTerraformRemoteStateCosConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcd": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcd backend. Terraform deprecated etcd in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcd",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 35
      },
      "name": "DataTerraformRemoteStateEtcd",
      "symbolId": "lib/backends/etcd-backend:DataTerraformRemoteStateEtcd"
    },
    "cdktf.DataTerraformRemoteStateEtcdConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcd backend. Terraform deprecated etcd in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 76
      },
      "name": "DataTerraformRemoteStateEtcdConfig",
      "symbolId": "lib/backends/etcd-backend:DataTerraformRemoteStateEtcdConfig"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 38
      },
      "name": "DataTerraformRemoteStateEtcdV3",
      "symbolId": "lib/backends/etcdv3-backend:DataTerraformRemoteStateEtcdV3"
    },
    "cdktf.DataTerraformRemoteStateEtcdV3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.EtcdV3BackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 98
      },
      "name": "DataTerraformRemoteStateEtcdV3Config",
      "symbolId": "lib/backends/etcdv3-backend:DataTerraformRemoteStateEtcdV3Config"
    },
    "cdktf.DataTerraformRemoteStateGcs": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcs",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateGcsConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStateGcs",
      "symbolId": "lib/backends/gcs-backend:DataTerraformRemoteStateGcs"
    },
    "cdktf.DataTerraformRemoteStateGcsConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.GcsBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 98
      },
      "name": "DataTerraformRemoteStateGcsConfig",
      "symbolId": "lib/backends/gcs-backend:DataTerraformRemoteStateGcsConfig"
    },
    "cdktf.DataTerraformRemoteStateHttp": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttp",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateHttpConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 31
      },
      "name": "DataTerraformRemoteStateHttp",
      "symbolId": "lib/backends/http-backend:DataTerraformRemoteStateHttp"
    },
    "cdktf.DataTerraformRemoteStateHttpConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.HttpBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 106
      },
      "name": "DataTerraformRemoteStateHttpConfig",
      "symbolId": "lib/backends/http-backend:DataTerraformRemoteStateHttpConfig"
    },
    "cdktf.DataTerraformRemoteStateLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 48
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateLocalConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 47
      },
      "name": "DataTerraformRemoteStateLocal",
      "symbolId": "lib/backends/local-backend:DataTerraformRemoteStateLocal"
    },
    "cdktf.DataTerraformRemoteStateLocalConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.LocalBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 75
      },
      "name": "DataTerraformRemoteStateLocalConfig",
      "symbolId": "lib/backends/local-backend:DataTerraformRemoteStateLocalConfig"
    },
    "cdktf.DataTerraformRemoteStateManta": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the manta backend. Terraform deprecated manta in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateManta",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateMantaConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 38
      },
      "name": "DataTerraformRemoteStateManta",
      "symbolId": "lib/backends/manta-backend:DataTerraformRemoteStateManta"
    },
    "cdktf.DataTerraformRemoteStateMantaConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the manta backend. Terraform deprecated manta in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.MantaBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 65
      },
      "name": "DataTerraformRemoteStateMantaConfig",
      "symbolId": "lib/backends/manta-backend:DataTerraformRemoteStateMantaConfig"
    },
    "cdktf.DataTerraformRemoteStateOss": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOss",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateOssConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 31
      },
      "name": "DataTerraformRemoteStateOss",
      "symbolId": "lib/backends/oss-backend:DataTerraformRemoteStateOss"
    },
    "cdktf.DataTerraformRemoteStateOssConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.OssBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 67
      },
      "name": "DataTerraformRemoteStateOssConfig",
      "symbolId": "lib/backends/oss-backend:DataTerraformRemoteStateOssConfig"
    },
    "cdktf.DataTerraformRemoteStatePg": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePg",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStatePgConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStatePg",
      "symbolId": "lib/backends/pg-backend:DataTerraformRemoteStatePg"
    },
    "cdktf.DataTerraformRemoteStatePgConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.PgBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 50
      },
      "name": "DataTerraformRemoteStatePgConfig",
      "symbolId": "lib/backends/pg-backend:DataTerraformRemoteStatePgConfig"
    },
    "cdktf.DataTerraformRemoteStateRemoteConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.RemoteBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 68
      },
      "name": "DataTerraformRemoteStateRemoteConfig",
      "symbolId": "lib/backends/remote-backend:DataTerraformRemoteStateRemoteConfig"
    },
    "cdktf.DataTerraformRemoteStateS3": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateS3Config"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 34
      },
      "name": "DataTerraformRemoteStateS3",
      "symbolId": "lib/backends/s3-backend:DataTerraformRemoteStateS3"
    },
    "cdktf.DataTerraformRemoteStateS3Config": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.DataTerraformRemoteStateS3Config",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.S3BackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 211
      },
      "name": "DataTerraformRemoteStateS3Config",
      "symbolId": "lib/backends/s3-backend:DataTerraformRemoteStateS3Config"
    },
    "cdktf.DataTerraformRemoteStateSwift": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformRemoteState",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwift",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 35
      },
      "name": "DataTerraformRemoteStateSwift",
      "symbolId": "lib/backends/swift-backend:DataTerraformRemoteStateSwift"
    },
    "cdktf.DataTerraformRemoteStateSwiftConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
      "interfaces": [
        "cdktf.DataTerraformRemoteStateConfig",
        "cdktf.SwiftBackendConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 81
      },
      "name": "DataTerraformRemoteStateSwiftConfig",
      "symbolId": "lib/backends/swift-backend:DataTerraformRemoteStateSwiftConfig"
    },
    "cdktf.DefaultTokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Default resolver implementation."
      },
      "fqn": "cdktf.DefaultTokenResolver",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Resolves tokens."
        },
        "locationInModule": {
          "filename": "lib/tokens/resolvable.ts",
          "line": 173
        },
        "parameters": [
          {
            "name": "concat",
            "type": {
              "fqn": "cdktf.IFragmentConcatenator"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITokenResolver"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 169
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolves a list of string."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 220
          },
          "name": "resolveList",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolves a map token."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 261
          },
          "name": "resolveMap",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolves a list of numbers."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 243
          },
          "name": "resolveNumberList",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "xs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resolve string fragments to Tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 210
          },
          "name": "resolveString",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "fragments",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it.",
            "stability": "experimental",
            "summary": "Default Token resolution."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 181
          },
          "name": "resolveToken",
          "overrides": "cdktf.ITokenResolver",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "DefaultTokenResolver",
      "symbolId": "lib/tokens/resolvable:DefaultTokenResolver"
    },
    "cdktf.EncodingOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties to string encodings."
      },
      "fqn": "cdktf.EncodingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 340
      },
      "name": "EncodingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no display hint",
            "stability": "experimental",
            "summary": "A hint for the Token's purpose when stringifying it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 345
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/token:EncodingOptions"
    },
    "cdktf.EtcdBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcd backend. Terraform deprecated etcd in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.EtcdBackend",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/etcd-backend.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 23
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 19
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdBackend",
      "symbolId": "lib/backends/etcd-backend:EtcdBackend"
    },
    "cdktf.EtcdBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcd backend. Terraform deprecated etcd in v1.2.3 and removed it in v1.3.",
        "remarks": "This backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/v1.2.x/settings/backends/etcd",
        "stability": "deprecated",
        "summary": "Stores the state in etcd 2.x at a given path."
      },
      "fqn": "cdktf.EtcdBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcd-backend.ts",
        "line": 54
      },
      "name": "EtcdBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) A space-separated list of the etcd endpoints."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 62
          },
          "name": "endpoints",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) The path where to store the state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 58
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) The password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 70
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) The username."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcd-backend.ts",
            "line": 66
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/etcd-backend:EtcdBackendConfig"
    },
    "cdktf.EtcdV3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.EtcdV3Backend",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/etcdv3-backend.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.EtcdV3BackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 23
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 19
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "EtcdV3Backend",
      "symbolId": "lib/backends/etcdv3-backend:EtcdV3Backend"
    },
    "cdktf.EtcdV3BackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the etcdv3 backend. Terraform deprecated etcdv3 in v1.2.3 and removed it in v1.3.",
        "remarks": "This backend supports state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/v1.2.x/settings/backends/etcdv3",
        "stability": "deprecated",
        "summary": "Stores the state in the etcd KV store with a given prefix."
      },
      "fqn": "cdktf.EtcdV3BackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/etcdv3-backend.ts",
        "line": 57
      },
      "name": "EtcdV3BackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Required) The list of 'etcd' endpoints which to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 61
          },
          "name": "endpoints",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 83
          },
          "name": "cacertPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 88
          },
          "name": "certPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 92
          },
          "name": "keyPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to true.",
            "stability": "deprecated",
            "summary": "(Optional) Whether to lock state access."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 78
          },
          "name": "lock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) Password used to connect to the etcd cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 69
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to \"\".",
            "stability": "deprecated",
            "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 74
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "(Optional) Username used to connect to the etcd cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/etcdv3-backend.ts",
            "line": 65
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/etcdv3-backend:EtcdV3BackendConfig"
    },
    "cdktf.FileProvisioner": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "The file provisioner supports both ssh and winrm type connections.\n\nSee {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/file file}",
        "stability": "experimental",
        "summary": "The file provisioner copies files or directories from the machine running Terraform to the newly created resource."
      },
      "fqn": "cdktf.FileProvisioner",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 243
      },
      "name": "FileProvisioner",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Specify it either relative to the current working directory or as an absolute path.\nThis argument cannot be combined with content.",
            "stability": "experimental",
            "summary": "The source file or directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 249
          },
          "name": "destination",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 244
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 267
          },
          "name": "connection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "cdktf.SSHProvisionerConnection"
                },
                {
                  "fqn": "cdktf.WinrmProvisionerConnection"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "See Destination Paths below for more information.",
            "stability": "experimental",
            "summary": "The destination path to write to on the remote system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 262
          },
          "name": "content",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If destination is a file, the content will be written on that file.\nIn case of a directory, a file named tf-file-content is created inside that directory.\nWe recommend using a file as the destination when using content.\nThis argument cannot be combined with source.",
            "stability": "experimental",
            "summary": "The direct content to copy on the destination."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 257
          },
          "name": "source",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provisioner:FileProvisioner"
    },
    "cdktf.Fn": {
      "assembly": "cdktf",
      "base": "cdktf.FnGenerated",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.Fn",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-functions.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link /terraform/docs/language/functions/bcrypt.html bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in [the _Modular Crypt Format_](https://passlib.readthedocs.io/en/stable/modular_crypt_format.html) usually expected in the shadow password file on many Unix systems."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 14
          },
          "name": "bcrypt",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "cost",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link /terraform/docs/language/functions/join.html join} produces a string by concatenating together all elements of a given list of strings with the given delimiter."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 48
          },
          "name": "join",
          "parameters": [
            {
              "name": "separator",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link /terraform/docs/language/functions/lookup.html lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 27
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "inputMap",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "defaultValue",
              "optional": true,
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "For example lookupNested(x, [\"a\", \"b\", \"c\"]) will return a Terraform expression like x[\"a\"][\"b\"][\"c\"]",
            "stability": "experimental",
            "summary": "returns a property access expression that accesses the property at the given path in the given inputMap."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 39
          },
          "name": "lookupNested",
          "parameters": [
            {
              "name": "inputMap",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "path",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link /terraform/docs/language/functions/range.html range} generates a list of numbers using a start value, a limit value, and a step value."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 60
          },
          "name": "range",
          "parameters": [
            {
              "name": "start",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "limit",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "step",
              "optional": true,
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use this function to wrap a string and escape it properly for the use in Terraform This is only needed in certain scenarios (e.g., if you have unescaped double quotes in the string)."
          },
          "locationInModule": {
            "filename": "lib/terraform-functions.ts",
            "line": 71
          },
          "name": "rawString",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Fn",
      "symbolId": "lib/terraform-functions:Fn"
    },
    "cdktf.FnGenerated": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.FnGenerated",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/functions/terraform-functions.generated.ts",
        "line": 22
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/abs abs} returns the absolute value of the given number. In other words, if the number is zero or positive then it is returned as-is, but if it is negative then it is multiplied by -1 to make it positive before returning it."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 27
          },
          "name": "abs",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/abspath abspath} takes a string containing a filesystem path and converts it to an absolute path. That is, if the path is not absolute, it will be joined with the current working directory."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 34
          },
          "name": "abspath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/alltrue alltrue} returns `true` if all elements in a given collection are `true` or `&#34;true&#34;`. It also returns `true` if the collection is empty."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 41
          },
          "name": "alltrue",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/anytrue anytrue} returns `true` if any element in a given collection is `true` or `&#34;true&#34;`. It also returns `false` if the collection is empty."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 48
          },
          "name": "anytrue",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/base64decode base64decode} takes a string containing a Base64 character sequence and returns the original string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 55
          },
          "name": "base64decode",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/base64encode base64encode} applies Base64 encoding to a string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 62
          },
          "name": "base64encode",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/base64gzip base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 69
          },
          "name": "base64gzip",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/base64sha256 base64sha256} computes the SHA256 hash of a given string and encodes it with Base64. This is not equivalent to `base64encode(sha256(&#34;test&#34;))` since `sha256()` returns hexadecimal representation."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 76
          },
          "name": "base64sha256",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/base64sha512 base64sha512} computes the SHA512 hash of a given string and encodes it with Base64. This is not equivalent to `base64encode(sha512(&#34;test&#34;))` since `sha512()` returns hexadecimal representation."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 83
          },
          "name": "base64sha512",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/basename basename} takes a string containing a filesystem path and removes all except the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 90
          },
          "name": "basename",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/can can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 111
          },
          "name": "can",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/ceil ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 118
          },
          "name": "ceil",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/chomp chomp} removes newline characters at the end of a string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 125
          },
          "name": "chomp",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/chunklist chunklist} splits a single list into fixed-size chunks, returning a list of lists."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 133
          },
          "name": "chunklist",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "size",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/cidrhost cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 146
          },
          "name": "cidrhost",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "hostnum",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/cidrnetmask cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 158
          },
          "name": "cidrnetmask",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/cidrsubnet cidrsubnet} calculates a subnet address within given IP network address prefix."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 167
          },
          "name": "cidrsubnet",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newbits",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "netnum",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/cidrsubnets cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 181
          },
          "name": "cidrsubnets",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newbits",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/coalesce coalesce} takes any number of arguments and returns the first one that isn&#39;t null or an empty string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 193
          },
          "name": "coalesce",
          "parameters": [
            {
              "name": "vals",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/coalescelist coalescelist} takes any number of list arguments and returns the first one that isn&#39;t empty."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 200
          },
          "name": "coalescelist",
          "parameters": [
            {
              "name": "vals",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/compact compact} takes a list of strings and returns a new list with any empty string elements removed."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 207
          },
          "name": "compact",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/concat concat} takes two or more lists and combines them into a single list."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 214
          },
          "name": "concat",
          "parameters": [
            {
              "name": "seqs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/contains contains} determines whether a given list or set contains a given single value as one of its elements."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 222
          },
          "name": "contains",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/csvdecode csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 231
          },
          "name": "csvdecode",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/dirname dirname} takes a string containing a filesystem path and removes the last portion from it."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 238
          },
          "name": "dirname",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/distinct distinct} takes a list and returns a new list with any duplicate elements removed."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 245
          },
          "name": "distinct",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/element element} retrieves a single element from a list."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 253
          },
          "name": "element",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/endswith endswith} takes two values: a string to check and a suffix string. The function returns true if the first string ends with that exact suffix."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 263
          },
          "name": "endswith",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "suffix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/file file} reads the contents of a file at the given path and returns them as a string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 272
          },
          "name": "file",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filebase64 filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 279
          },
          "name": "filebase64",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filebase64sha256 filebase64sha256} is a variant of `base64sha256` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 286
          },
          "name": "filebase64sha256",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filebase64sha512 filebase64sha512} is a variant of `base64sha512` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 293
          },
          "name": "filebase64sha512",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/fileexists fileexists} determines whether a file exists at a given path."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 300
          },
          "name": "fileexists",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filemd5 filemd5} is a variant of `md5` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 307
          },
          "name": "filemd5",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/fileset fileset} enumerates a set of regular file names given a path and pattern. The path is automatically removed from the resulting set of file names and any result still containing path separators always returns forward slash (`/`) as the path separator for cross-system compatibility."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 315
          },
          "name": "fileset",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filesha1 filesha1} is a variant of `sha1` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 324
          },
          "name": "filesha1",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filesha256 filesha256} is a variant of `sha256` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 331
          },
          "name": "filesha256",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/filesha512 filesha512} is a variant of `sha512` that hashes the contents of a given file rather than a literal string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 338
          },
          "name": "filesha512",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/flatten flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 345
          },
          "name": "flatten",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/floor floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 352
          },
          "name": "floor",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The {@link https://developer.hashicorp.com/terraform/language/functions/format format} function produces a string by formatting a number of other values according to a specification string. It is similar to the `printf` function in C, and other similar functions in other programming languages."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 360
          },
          "name": "format",
          "parameters": [
            {
              "name": "format",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/formatdate formatdate} converts a timestamp into a different time format."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 373
          },
          "name": "formatdate",
          "parameters": [
            {
              "name": "format",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "time",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/formatlist formatlist} produces a list of strings by formatting a number of other values according to a specification string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 383
          },
          "name": "formatlist",
          "parameters": [
            {
              "name": "format",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "args",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/indent indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 396
          },
          "name": "indent",
          "parameters": [
            {
              "name": "spaces",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/index index} finds the element index for a given value in a list."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 406
          },
          "name": "index",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/jsondecode jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 427
          },
          "name": "jsondecode",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/jsonencode jsonencode} encodes a given value to a string using JSON syntax."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 434
          },
          "name": "jsonencode",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/keys keys} takes a map and returns a list containing the keys from that map."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 441
          },
          "name": "keys",
          "parameters": [
            {
              "name": "inputMap",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/length length} determines the length of a given list, map, or string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 448
          },
          "name": "lengthOf",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/log log} returns the logarithm of a given number in a given base."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 456
          },
          "name": "log",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "base",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/lower lower} converts all cased letters in the given string to lowercase."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 481
          },
          "name": "lower",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/matchkeys matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 490
          },
          "name": "matchkeys",
          "parameters": [
            {
              "name": "values",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "keys",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "searchset",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/max max} takes one or more numbers and returns the greatest number from the set."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 503
          },
          "name": "max",
          "parameters": [
            {
              "name": "numbers",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/md5 md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 512
          },
          "name": "md5",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/merge merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 519
          },
          "name": "merge",
          "parameters": [
            {
              "name": "maps",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/min min} takes one or more numbers and returns the smallest number from the set."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 526
          },
          "name": "min",
          "parameters": [
            {
              "name": "numbers",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/nonsensitive nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 535
          },
          "name": "nonsensitive",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/one one} takes a list, set, or tuple value with either zero or one elements. If the collection is empty, `one` returns `null`. Otherwise, `one` returns the first element. If there are two or more elements then `one` will return an error."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 542
          },
          "name": "one",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/parseint parseint} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 550
          },
          "name": "parseint",
          "parameters": [
            {
              "name": "number",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "base",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/pathexpand pathexpand} takes a filesystem path that might begin with a `~` segment, and if so it replaces that segment with the current user&#39;s home directory path."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 559
          },
          "name": "pathexpand",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/pow pow} calculates an exponent, by raising its first argument to the power of the second argument."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 567
          },
          "name": "pow",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "power",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/regex regex} applies a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to a string and returns the matching substrings."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 585
          },
          "name": "regex",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/regexall regexall} applies a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to a string and returns a list of all matches."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 595
          },
          "name": "regexall",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/replace replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 606
          },
          "name": "replace",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "substr",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "replace",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/reverse reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 619
          },
          "name": "reverse",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/rsadecrypt rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 627
          },
          "name": "rsadecrypt",
          "parameters": [
            {
              "name": "ciphertext",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "privatekey",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sensitive sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for [sensitive input variables](/language/values/variables#suppressing-values-in-cli-output)."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 639
          },
          "name": "sensitive",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The {@link https://developer.hashicorp.com/terraform/language/functions/setintersection setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common. In other words, it computes the [intersection](https://en.wikipedia.org/wiki/Intersection_\\(set_theory\\)) of the sets."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 647
          },
          "name": "setintersection",
          "parameters": [
            {
              "name": "first_set",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "other_sets",
              "type": {
                "collection": {
                  "elementtype": {
                    "collection": {
                      "elementtype": {
                        "primitive": "any"
                      },
                      "kind": "array"
                    }
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The {@link https://developer.hashicorp.com/terraform/language/functions/setproduct setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product)."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 659
          },
          "name": "setproduct",
          "parameters": [
            {
              "name": "sets",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The {@link https://developer.hashicorp.com/terraform/language/functions/setsubtract setsubtract} function returns a new set containing the elements from the first set that are not present in the second set. In other words, it computes the [relative complement](https://en.wikipedia.org/wiki/Complement_\\(set_theory\\)#Relative_complement) of the second set."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 667
          },
          "name": "setsubtract",
          "parameters": [
            {
              "name": "a",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "b",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The {@link https://developer.hashicorp.com/terraform/language/functions/setunion setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets. In other words, it computes the [union](https://en.wikipedia.org/wiki/Union_\\(set_theory\\)) of the sets."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 680
          },
          "name": "setunion",
          "parameters": [
            {
              "name": "first_set",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "other_sets",
              "type": {
                "collection": {
                  "elementtype": {
                    "collection": {
                      "elementtype": {
                        "primitive": "any"
                      },
                      "kind": "array"
                    }
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sha1 sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 692
          },
          "name": "sha1",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sha256 sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 699
          },
          "name": "sha256",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sha512 sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 706
          },
          "name": "sha512",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/signum signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 713
          },
          "name": "signum",
          "parameters": [
            {
              "name": "num",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/slice slice} extracts some consecutive elements from within a list."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 722
          },
          "name": "slice",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "start_index",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "end_index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sort sort} takes a list of strings and returns a new list with those strings sorted lexicographically."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 735
          },
          "name": "sort",
          "parameters": [
            {
              "name": "list",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/split split} produces a list by dividing a given string at all occurrences of a given separator."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 743
          },
          "name": "split",
          "parameters": [
            {
              "name": "separator",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/startswith startswith} takes two values: a string to check and a prefix string. The function returns true if the string begins with that exact prefix."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 753
          },
          "name": "startswith",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/strrev strrev} reverses the characters in a string. Note that the characters are treated as _Unicode characters_ (in technical terms, Unicode [grapheme cluster boundaries](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries) are respected)."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 762
          },
          "name": "strrev",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/substr substr} extracts a substring from a given string by offset and (maximum) length."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 771
          },
          "name": "substr",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "offset",
              "type": {
                "primitive": "number"
              }
            },
            {
              "name": "length",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/sum sum} takes a list or set of numbers and returns the sum of those numbers."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 784
          },
          "name": "sum",
          "parameters": [
            {
              "name": "list",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/templatefile templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 792
          },
          "name": "templatefile",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "vars",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/textdecodebase64 textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 802
          },
          "name": "textdecodebase64",
          "parameters": [
            {
              "name": "source",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "encoding",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/textencodebase64 textencodebase64} encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 815
          },
          "name": "textencodebase64",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "encoding",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/timeadd timeadd} adds a duration to a timestamp, returning a new timestamp."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 828
          },
          "name": "timeadd",
          "parameters": [
            {
              "name": "timestamp",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "duration",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/timecmp timecmp} compares two timestamps and returns a number that represents the ordering of the instants those timestamps represent."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 841
          },
          "name": "timecmp",
          "parameters": [
            {
              "name": "timestamp_a",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "timestamp_b",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/timestamp timestamp} returns a UTC timestamp string in [RFC 3339](https://tools.ietf.org/html/rfc3339) format."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 852
          },
          "name": "timestamp",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/title title} converts the first letter of each word in the given string to uppercase."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 859
          },
          "name": "title",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/tobool tobool} converts its argument to a boolean value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 866
          },
          "name": "tobool",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/tolist tolist} converts its argument to a list value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 873
          },
          "name": "tolist",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/tomap tomap} converts its argument to a map value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 880
          },
          "name": "tomap",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/tonumber tonumber} converts its argument to a number value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 887
          },
          "name": "tonumber",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/toset toset} converts its argument to a set value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 894
          },
          "name": "toset",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/tostring tostring} converts its argument to a string value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 901
          },
          "name": "tostring",
          "parameters": [
            {
              "name": "v",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/transpose transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 908
          },
          "name": "transpose",
          "parameters": [
            {
              "name": "values",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/trim trim} removes the specified set of characters from the start and end of the given string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 916
          },
          "name": "trim",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "cutset",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/trimprefix trimprefix} removes the specified prefix from the start of the given string. If the string does not start with the prefix, the string is returned unchanged."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 926
          },
          "name": "trimprefix",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/trimspace trimspace} removes any space characters from the start and end of the given string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 935
          },
          "name": "trimspace",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/trimsuffix trimsuffix} removes the specified suffix from the end of the given string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 943
          },
          "name": "trimsuffix",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "suffix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/try try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 952
          },
          "name": "try",
          "parameters": [
            {
              "name": "expressions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/upper upper} converts all cased letters in the given string to uppercase."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 959
          },
          "name": "upper",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/urlencode urlencode} applies URL encoding to a given string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 966
          },
          "name": "urlencode",
          "parameters": [
            {
              "name": "str",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/uuid uuid} generates a unique identifier string."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 972
          },
          "name": "uuid",
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/uuidv5 uuidv5} generates a _name-based_ UUID, as described in [RFC 4122 section 4.3](https://tools.ietf.org/html/rfc4122#section-4.3), also known as a &#34;version 5&#34; UUID."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 980
          },
          "name": "uuidv5",
          "parameters": [
            {
              "name": "namespace",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/values values} takes a map and returns a list containing the values of the elements in that map."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 989
          },
          "name": "values",
          "parameters": [
            {
              "name": "mapping",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/yamldecode yamldecode} parses a string as a subset of YAML, and produces a representation of its value."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 996
          },
          "name": "yamldecode",
          "parameters": [
            {
              "name": "src",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/yamlencode yamlencode} encodes a given value to a string using [YAML 1.2](https://yaml.org/spec/1.2/spec.html) block syntax."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 1003
          },
          "name": "yamlencode",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "{@link https://developer.hashicorp.com/terraform/language/functions/zipmap zipmap} constructs a map from a list of keys and a corresponding list of values."
          },
          "locationInModule": {
            "filename": "lib/functions/terraform-functions.generated.ts",
            "line": 1011
          },
          "name": "zipmap",
          "parameters": [
            {
              "name": "keys",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "values",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        }
      ],
      "name": "FnGenerated",
      "symbolId": "lib/functions/terraform-functions.generated:FnGenerated"
    },
    "cdktf.GcsBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.GcsBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/gcs-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.GcsBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "GcsBackend",
      "symbolId": "lib/backends/gcs-backend:GcsBackend"
    },
    "cdktf.GcsBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "The bucket must exist prior to configuring the backend.\n\nThis backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the GCS bucket\nto allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/gcs",
        "stability": "experimental",
        "summary": "Stores the state as an object in a configurable prefix in a pre-existing bucket on Google Cloud Storage (GCS)."
      },
      "fqn": "cdktf.GcsBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/gcs-backend.ts",
        "line": 55
      },
      "name": "GcsBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "This name must be globally unique.",
            "stability": "experimental",
            "summary": "(Required) The name of the GCS bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 59
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 75
          },
          "name": "accessToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 68
          },
          "name": "credentials",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 84
          },
          "name": "encryptionKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) The service account to impersonate for accessing the State Bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 91
          },
          "name": "impersonateServiceAccount",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) The delegation chain for an impersonating a service account."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 95
          },
          "name": "impersonateServiceAccountDelegates",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate.",
            "stability": "experimental",
            "summary": "(Optional) GCS prefix inside the bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/gcs-backend.ts",
            "line": 80
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/gcs-backend:GcsBackendConfig"
    },
    "cdktf.HttpBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.HttpBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/http-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.HttpBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "HttpBackend",
      "symbolId": "lib/backends/http-backend:HttpBackend"
    },
    "cdktf.HttpBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "State will be fetched via GET, updated via POST, and purged with DELETE.\nThe method used for updating is configurable.\n\nThis backend optionally supports state locking.\nWhen locking support is enabled it will use LOCK and UNLOCK requests providing the lock info in the body.\nThe endpoint should return a 423: Locked or 409: Conflict with the holding lock info when\nit's already taken, 200: OK for success. Any other status will be considered an error.\nThe ID of the holding lock info will be added as a query parameter to state updates requests.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/http",
        "stability": "experimental",
        "summary": "Stores the state using a simple REST client."
      },
      "fqn": "cdktf.HttpBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/http-backend.ts",
        "line": 55
      },
      "name": "HttpBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Required) The address of the REST endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 59
          },
          "name": "address",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to disabled.",
            "stability": "experimental",
            "summary": "(Optional) The address of the lock REST endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 67
          },
          "name": "lockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to LOCK.",
            "stability": "experimental",
            "summary": "(Optional) The HTTP method to use when locking."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 71
          },
          "name": "lockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) The password for HTTP basic authentication."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 87
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to 2.",
            "stability": "experimental",
            "summary": "(Optional) The number of HTTP request retries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 95
          },
          "name": "retryMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to 30.",
            "stability": "experimental",
            "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 103
          },
          "name": "retryWaitMax",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to 1.",
            "stability": "experimental",
            "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 99
          },
          "name": "retryWaitMin",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to false.",
            "stability": "experimental",
            "summary": "(Optional) Whether to skip TLS verification."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 91
          },
          "name": "skipCertVerification",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to disabled.",
            "stability": "experimental",
            "summary": "(Optional) The address of the unlock REST endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 75
          },
          "name": "unlockAddress",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to UNLOCK.",
            "stability": "experimental",
            "summary": "(Optional) The HTTP method to use when unlocking."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 79
          },
          "name": "unlockMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to POST.",
            "stability": "experimental",
            "summary": "(Optional) HTTP method to use when updating state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 63
          },
          "name": "updateMethod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) The username for HTTP basic authentication."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/http-backend.ts",
            "line": 83
          },
          "name": "username",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/http-backend:HttpBackendConfig"
    },
    "cdktf.IAnyProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy untyped value producers."
      },
      "fqn": "cdktf.IAnyProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 41
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 45
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IAnyProducer",
      "symbolId": "lib/tokens/lazy:IAnyProducer"
    },
    "cdktf.IAspect": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Aspect."
      },
      "fqn": "cdktf.IAspect",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/aspect.ts",
        "line": 12
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "All aspects can visit an IConstruct."
          },
          "locationInModule": {
            "filename": "lib/aspect.ts",
            "line": 16
          },
          "name": "visit",
          "parameters": [
            {
              "name": "node",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "IAspect",
      "symbolId": "lib/aspect:IAspect"
    },
    "cdktf.IFragmentConcatenator": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it could potentially be exposed over jsii.",
        "stability": "experimental",
        "summary": "Function used to concatenate symbols in the target document language."
      },
      "fqn": "cdktf.IFragmentConcatenator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 137
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Join the fragment on the left and on the right."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 141
          },
          "name": "join",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IFragmentConcatenator",
      "symbolId": "lib/tokens/resolvable:IFragmentConcatenator"
    },
    "cdktf.IInterpolatingParent": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IInterpolatingParent",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-addressable.ts",
        "line": 8
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-addressable.ts",
            "line": 9
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "IInterpolatingParent",
      "symbolId": "lib/terraform-addressable:IInterpolatingParent"
    },
    "cdktf.IListProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy list producers."
      },
      "fqn": "cdktf.IListProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 21
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the list value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 25
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IListProducer",
      "symbolId": "lib/tokens/lazy:IListProducer"
    },
    "cdktf.IManifest": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 23
      },
      "name": "IManifest",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 24
          },
          "name": "stacks",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackManifest"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 25
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:IManifest"
    },
    "cdktf.INumberProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy number producers."
      },
      "fqn": "cdktf.INumberProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 31
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the number value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 35
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "INumberProducer",
      "symbolId": "lib/tokens/lazy:INumberProducer"
    },
    "cdktf.IPostProcessor": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
      },
      "fqn": "cdktf.IPostProcessor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 87
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Process the completely resolved value, after full recursion/resolution has happened."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 91
          },
          "name": "postProcess",
          "parameters": [
            {
              "name": "input",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IPostProcessor",
      "symbolId": "lib/tokens/resolvable:IPostProcessor"
    },
    "cdktf.IRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IRemoteWorkspace",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 56
      },
      "name": "IRemoteWorkspace",
      "symbolId": "lib/backends/remote-backend:IRemoteWorkspace"
    },
    "cdktf.IResolvable": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Tokens are special objects that participate in synthesis.",
        "stability": "experimental",
        "summary": "Interface for values that can be resolvable later."
      },
      "fqn": "cdktf.IResolvable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 62
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 74
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 81
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IResolvable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 69
          },
          "name": "creationStack",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/tokens/resolvable:IResolvable"
    },
    "cdktf.IResolveContext": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Current resolution context for tokens."
      },
      "fqn": "cdktf.IResolveContext",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 12
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Use this postprocessor after the entire token structure has been resolved."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 54
          },
          "name": "registerPostProcessor",
          "parameters": [
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve an inner object."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 49
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IResolveContext",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "True when we are still preparing, false if we're rendering the final output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 21
          },
          "name": "preparing",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution has been initiated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 16
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "True when ${} should not be parsed, and treated as literals."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 31
          },
          "name": "ignoreEscapes",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "TerraformIterators can be passed for block attributes and normal list attributes both require different handling when the iterable variable is accessed e.g. a dynamic block needs each.key while a for expression just needs key."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 44
          },
          "name": "iteratorContext",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "True when ${} should be ommitted (because already inside them), false otherwise."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 26
          },
          "name": "suppressBraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Default: false",
            "stability": "experimental",
            "summary": "True when ${} should not be included in the string to be resolved, outputs a warning."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 37
          },
          "name": "warnEscapes",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/resolvable:IResolveContext"
    },
    "cdktf.IResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IResource",
      "interfaces": [
        "constructs.IConstruct"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 6
      },
      "name": "IResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 10
          },
          "name": "stack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ],
      "symbolId": "lib/resource:IResource"
    },
    "cdktf.IResourceConstructor": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IResourceConstructor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 13
      },
      "name": "IResourceConstructor",
      "symbolId": "lib/resource:IResourceConstructor"
    },
    "cdktf.IScopeCallback": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.IScopeCallback",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 20
      },
      "name": "IScopeCallback",
      "symbolId": "lib/testing/index:IScopeCallback"
    },
    "cdktf.IStackSynthesizer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Encodes information how a certain Stack should be deployed inspired by AWS CDK v2 implementation (synth functionality was removed in constructs v10)."
      },
      "fqn": "cdktf.IStackSynthesizer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synthesize/types.ts",
        "line": 9
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Synthesize the associated stack to the session."
          },
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 13
          },
          "name": "synthesize",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "cdktf.ISynthesisSession"
              }
            }
          ]
        }
      ],
      "name": "IStackSynthesizer",
      "symbolId": "lib/synthesize/types:IStackSynthesizer"
    },
    "cdktf.IStringProducer": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for lazy string producers."
      },
      "fqn": "cdktf.IStringProducer",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 11
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Produce the string value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 15
          },
          "name": "produce",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IStringProducer",
      "symbolId": "lib/tokens/lazy:IStringProducer"
    },
    "cdktf.ISynthesisSession": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Passed into `TerraformStack.onSynthesize()` methods.\noriginally from aws/constructs lib v3.3.126 (synth functionality was removed in constructs v10)",
        "stability": "experimental",
        "summary": "Represents a single session of synthesis."
      },
      "fqn": "cdktf.ISynthesisSession",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/synthesize/types.ts",
        "line": 20
      },
      "name": "ISynthesisSession",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 28
          },
          "name": "manifest",
          "type": {
            "fqn": "cdktf.Manifest"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The output directory for this synthesis session."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 24
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/synthesize/types.ts",
            "line": 26
          },
          "name": "skipValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/synthesize/types:ISynthesisSession"
    },
    "cdktf.ITerraformAddressable": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformAddressable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-addressable.ts",
        "line": 4
      },
      "name": "ITerraformAddressable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-addressable.ts",
            "line": 5
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-addressable:ITerraformAddressable"
    },
    "cdktf.ITerraformDependable": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformDependable",
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-dependable.ts",
        "line": 5
      },
      "name": "ITerraformDependable",
      "symbolId": "lib/terraform-dependable:ITerraformDependable"
    },
    "cdktf.ITerraformIterator": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformIterator",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-iterator.ts",
        "line": 25
      },
      "name": "ITerraformIterator",
      "symbolId": "lib/terraform-iterator:ITerraformIterator"
    },
    "cdktf.ITerraformResource": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ITerraformResource",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 28
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 39
          },
          "name": "interpolationForAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        }
      ],
      "name": "ITerraformResource",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 30
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 31
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 29
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 34
          },
          "name": "count",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "cdktf.TerraformCount"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 33
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 37
          },
          "name": "forEach",
          "optional": true,
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 36
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 35
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:ITerraformResource"
    },
    "cdktf.ITokenMapper": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Interface so it can be exported via jsii.",
        "stability": "experimental",
        "summary": "Interface to apply operation to tokens in a string."
      },
      "fqn": "cdktf.ITokenMapper",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 218
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Replace a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 222
          },
          "name": "mapToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenMapper",
      "symbolId": "lib/tokens/string-fragments:ITokenMapper"
    },
    "cdktf.ITokenResolver": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "How to resolve tokens."
      },
      "fqn": "cdktf.ITokenResolver",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 97
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 117
          },
          "name": "resolveList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized map."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 127
          },
          "name": "resolveMap",
          "parameters": [
            {
              "name": "m",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a tokenized number list."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 122
          },
          "name": "resolveNumberList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "(May use concatenation)",
            "stability": "experimental",
            "summary": "Resolve a string with at least one stringified token in it."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 112
          },
          "name": "resolveString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Resolve a single token."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 101
          },
          "name": "resolveToken",
          "parameters": [
            {
              "name": "t",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            },
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "ITokenResolver",
      "symbolId": "lib/tokens/resolvable:ITokenResolver"
    },
    "cdktf.Lazy": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis.",
        "stability": "experimental",
        "summary": "Lazily produce a value."
      },
      "fqn": "cdktf.Lazy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 104
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produces a lazy token from an untyped value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 142
          },
          "name": "anyValue",
          "parameters": [
            {
              "docs": {
                "summary": "The lazy producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IAnyProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyAnyValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a list-ified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 130
          },
          "name": "listValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IListProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyListValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a numberified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 121
          },
          "name": "numberValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.INumberProducer"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a stringified token for a lazy value."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 110
          },
          "name": "stringValue",
          "parameters": [
            {
              "docs": {
                "summary": "The producer."
              },
              "name": "producer",
              "type": {
                "fqn": "cdktf.IStringProducer"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.LazyStringValueOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Lazy",
      "symbolId": "lib/tokens/lazy:Lazy"
    },
    "cdktf.LazyAnyValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating lazy untyped tokens."
      },
      "fqn": "cdktf.LazyAnyValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 82
      },
      "name": "LazyAnyValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 88
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 95
          },
          "name": "omitEmptyArray",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyAnyValueOptions"
    },
    "cdktf.LazyBase": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LazyBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/tokens/lazy.ts",
          "line": 155
        }
      },
      "interfaces": [
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 151
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 173
          },
          "name": "addPostProcessor",
          "parameters": [
            {
              "name": "postProcessor",
              "type": {
                "fqn": "cdktf.IPostProcessor"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 159
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 166
          },
          "name": "resolveLazy",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Called automatically when JSON.stringify() is called on a Token.",
            "stability": "experimental",
            "summary": "Turn this Token into JSON."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 182
          },
          "name": "toJSON",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 168
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "LazyBase",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 152
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyBase"
    },
    "cdktf.LazyListValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy list token."
      },
      "fqn": "cdktf.LazyListValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 63
      },
      "name": "LazyListValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 69
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If the produced list is empty, return 'undefined' instead."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 76
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyListValueOptions"
    },
    "cdktf.LazyStringValueOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a lazy string token."
      },
      "fqn": "cdktf.LazyStringValueOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/lazy.ts",
        "line": 51
      },
      "name": "LazyStringValueOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No hint",
            "stability": "experimental",
            "summary": "Use the given name as a display hint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/lazy.ts",
            "line": 57
          },
          "name": "displayHint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/lazy:LazyStringValueOptions"
    },
    "cdktf.ListTerraformIterator": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformIterator",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.ListTerraformIterator",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-iterator.ts",
          "line": 229
        },
        "parameters": [
          {
            "name": "list",
            "type": {
              "union": {
                "types": [
                  {
                    "collection": {
                      "elementtype": {
                        "primitive": "string"
                      },
                      "kind": "array"
                    }
                  },
                  {
                    "fqn": "cdktf.IResolvable"
                  },
                  {
                    "collection": {
                      "elementtype": {
                        "primitive": "number"
                      },
                      "kind": "array"
                    }
                  },
                  {
                    "fqn": "cdktf.ComplexList"
                  },
                  {
                    "fqn": "cdktf.StringMapList"
                  },
                  {
                    "fqn": "cdktf.NumberMapList"
                  },
                  {
                    "fqn": "cdktf.BooleanMapList"
                  },
                  {
                    "fqn": "cdktf.AnyMapList"
                  },
                  {
                    "collection": {
                      "elementtype": {
                        "union": {
                          "types": [
                            {
                              "primitive": "boolean"
                            },
                            {
                              "fqn": "cdktf.IResolvable"
                            }
                          ]
                        }
                      },
                      "kind": "array"
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-iterator.ts",
        "line": 228
      },
      "name": "ListTerraformIterator",
      "properties": [
        {
          "docs": {
            "remarks": "For lists this is the same as `iterator.value`. If you need the index,\nuse count using the escape hatch:\nhttps://developer.hashicorp.com/terraform/cdktf/concepts/resources#escape-hatch",
            "stability": "experimental",
            "summary": "Returns the currenty entry in the list or set that is being iterated over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 239
          },
          "name": "key",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the value of the current item iterated over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 246
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-iterator:ListTerraformIterator"
    },
    "cdktf.LocalBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.LocalBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/local-backend.ts",
          "line": 16
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "cdktf.LocalBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 31
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 27
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "LocalBackend",
      "symbolId": "lib/backends/local-backend:LocalBackend"
    },
    "cdktf.LocalBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "Read more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/local",
        "stability": "experimental",
        "summary": "The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally."
      },
      "fqn": "cdktf.LocalBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/local-backend.ts",
        "line": 63
      },
      "name": "LocalBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to terraform.${stackId}.tfstate",
            "stability": "experimental",
            "summary": "Path where the state file is stored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 68
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) The path to non-default workspaces."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/local-backend.ts",
            "line": 72
          },
          "name": "workspaceDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/local-backend:LocalBackendConfig"
    },
    "cdktf.LocalExecProvisioner": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "This invokes a process on the machine running Terraform, not on the resource.\n\nSee {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/local-exec local-exec}",
        "stability": "experimental",
        "summary": "The local-exec provisioner invokes a local executable after a resource is created."
      },
      "fqn": "cdktf.LocalExecProvisioner",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 276
      },
      "name": "LocalExecProvisioner",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nIt is evaluated in a shell, and can use environment variables or Terraform variables.",
            "stability": "experimental",
            "summary": "This is the command to execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 283
          },
          "name": "command",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 277
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It inherits the current process environment.",
            "stability": "experimental",
            "summary": "A record of key value pairs representing the environment of the executed command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 303
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The first argument is the interpreter itself.\nIt can be provided as a relative path to the current working directory or as an absolute path\nThe remaining arguments are appended prior to the command.\nThis allows building command lines of the form \"/bin/bash\", \"-c\", \"echo foo\".\nIf interpreter is unspecified, sensible defaults will be chosen based on the system OS.",
            "stability": "experimental",
            "summary": "If provided, this is a list of interpreter arguments used to execute the command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 298
          },
          "name": "interpreter",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For example, when = destroy specifies that the provisioner will run when the associated resource is destroyed",
            "stability": "experimental",
            "summary": "If provided, specifies when Terraform will execute the command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 308
          },
          "name": "when",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nThe directory must exist.",
            "stability": "experimental",
            "summary": "If provided, specifies the working directory where command will be executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 289
          },
          "name": "workingDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provisioner:LocalExecProvisioner"
    },
    "cdktf.Manifest": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.Manifest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/manifest.ts",
          "line": 36
        },
        "parameters": [
          {
            "name": "version",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "outdir",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IManifest"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 66
          },
          "name": "buildManifest",
          "returns": {
            "type": {
              "fqn": "cdktf.IManifest"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 41
          },
          "name": "forStack",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.StackManifest"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 73
          },
          "name": "writeToFile"
        }
      ],
      "name": "Manifest",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 30
          },
          "name": "fileName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 32
          },
          "name": "stackFileName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 31
          },
          "name": "stacksFolder",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 36
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 34
          },
          "name": "stacks",
          "overrides": "cdktf.IManifest",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackManifest"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 36
          },
          "name": "version",
          "overrides": "cdktf.IManifest",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:Manifest"
    },
    "cdktf.MantaBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the manta backend. Terraform deprecated manta in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.MantaBackend",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/manta-backend.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.MantaBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 23
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 19
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "MantaBackend",
      "symbolId": "lib/backends/manta-backend:MantaBackend"
    },
    "cdktf.MantaBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the manta backend. Terraform deprecated manta in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.MantaBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/manta-backend.ts",
        "line": 51
      },
      "name": "MantaBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 52
          },
          "name": "account",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 56
          },
          "name": "keyId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 58
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 57
          },
          "name": "insecureSkipTlsVerify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 55
          },
          "name": "keyMaterial",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 59
          },
          "name": "objectName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 54
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/manta-backend.ts",
            "line": 53
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/manta-backend:MantaBackendConfig"
    },
    "cdktf.MapList": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MapList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 484
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IInterpolatingParent",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 480
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 492
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 510
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.IInterpolatingParent",
          "parameters": [
            {
              "name": "property",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "MapList",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 486
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 485
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 487
          },
          "name": "wrapsSet",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:MapList"
    },
    "cdktf.MapTerraformIterator": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformIterator",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.MapTerraformIterator",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-iterator.ts",
          "line": 261
        },
        "parameters": [
          {
            "name": "map",
            "type": {
              "union": {
                "types": [
                  {
                    "fqn": "cdktf.StringMap"
                  },
                  {
                    "fqn": "cdktf.NumberMap"
                  },
                  {
                    "fqn": "cdktf.BooleanMap"
                  },
                  {
                    "fqn": "cdktf.AnyMap"
                  },
                  {
                    "fqn": "cdktf.ComplexMap"
                  },
                  {
                    "collection": {
                      "elementtype": {
                        "primitive": "any"
                      },
                      "kind": "map"
                    }
                  },
                  {
                    "collection": {
                      "elementtype": {
                        "primitive": "string"
                      },
                      "kind": "map"
                    }
                  },
                  {
                    "collection": {
                      "elementtype": {
                        "primitive": "number"
                      },
                      "kind": "map"
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-iterator.ts",
        "line": 260
      },
      "name": "MapTerraformIterator",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the key of the current entry in the map that is being iterated over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 276
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the value of the current item iterated over."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 283
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-iterator:MapTerraformIterator"
    },
    "cdktf.NamedCloudWorkspace": {
      "assembly": "cdktf",
      "base": "cdktf.CloudWorkspace",
      "docs": {
        "remarks": "You will only be able to use the workspace specified in the configuration with this working directory, and cannot manage workspaces from the CLI (e.g. terraform workspace select or terraform workspace new).",
        "stability": "experimental",
        "summary": "The name of a single Terraform Cloud workspace."
      },
      "fqn": "cdktf.NamedCloudWorkspace",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cloud-backend.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cloud-backend.ts",
        "line": 133
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 137
          },
          "name": "toTerraform",
          "overrides": "cdktf.CloudWorkspace",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "NamedCloudWorkspace",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 134
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/cloud-backend:NamedCloudWorkspace"
    },
    "cdktf.NamedRemoteWorkspace": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NamedRemoteWorkspace",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 60
        },
        "parameters": [
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 59
      },
      "name": "NamedRemoteWorkspace",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 60
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:NamedRemoteWorkspace"
    },
    "cdktf.NumberListList": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberListList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 333
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 332
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 341
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "NumberListList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 335
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 334
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 336
          },
          "name": "wrapsSet",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:NumberListList"
    },
    "cdktf.NumberListMap": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexMap",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberListMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 611
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 610
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 618
          },
          "name": "get",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "NumberListMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 613
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 612
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:NumberListMap"
    },
    "cdktf.NumberMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 138
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 134
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 153
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 145
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "NumberMap",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 140
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 139
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:NumberMap"
    },
    "cdktf.NumberMapList": {
      "assembly": "cdktf",
      "base": "cdktf.MapList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.NumberMapList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 548
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 547
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 556
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.NumberMap"
            }
          }
        }
      ],
      "name": "NumberMapList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 550
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 549
          },
          "name": "terraformResource",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 551
          },
          "name": "wrapsSet",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:NumberMapList"
    },
    "cdktf.Op": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "This class contains static functions for all arithmetical and logical operators in the Terraform configutation language."
      },
      "fqn": "cdktf.Op",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-operators.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left + right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 52
          },
          "name": "add",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left && right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 108
          },
          "name": "and",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left / right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 38
          },
          "name": "div",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left == right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 94
          },
          "name": "eq",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left > right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 66
          },
          "name": "gt",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left >= right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 73
          },
          "name": "gte",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left < right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 80
          },
          "name": "lt",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left <= right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 87
          },
          "name": "lte",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left % right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 45
          },
          "name": "mod",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left * right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 31
          },
          "name": "mul",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders -expression."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 24
          },
          "name": "negate",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left != right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 101
          },
          "name": "neq",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders !expression."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 17
          },
          "name": "not",
          "parameters": [
            {
              "name": "expression",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left || right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 115
          },
          "name": "or",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders left - right."
          },
          "locationInModule": {
            "filename": "lib/terraform-operators.ts",
            "line": 59
          },
          "name": "sub",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        }
      ],
      "name": "Op",
      "symbolId": "lib/terraform-operators:Op"
    },
    "cdktf.OssAssumeRole": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssAssumeRole",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 60
      },
      "name": "OssAssumeRole",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 61
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 62
          },
          "name": "policy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 64
          },
          "name": "sessionExpiration",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 63
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/oss-backend:OssAssumeRole"
    },
    "cdktf.OssBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/oss-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.OssBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "OssBackend",
      "symbolId": "lib/backends/oss-backend:OssBackend"
    },
    "cdktf.OssBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.OssBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/oss-backend.ts",
        "line": 41
      },
      "name": "OssBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 48
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 42
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 54
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 57
          },
          "name": "assumeRole",
          "optional": true,
          "type": {
            "fqn": "cdktf.OssAssumeRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 45
          },
          "name": "ecsRoleName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 53
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 47
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 50
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 49
          },
          "name": "prefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 56
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 46
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 43
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 44
          },
          "name": "securityToken",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 55
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 51
          },
          "name": "tablestoreEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/oss-backend.ts",
            "line": 52
          },
          "name": "tablestoreTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/oss-backend:OssBackendConfig"
    },
    "cdktf.PgBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/pg-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.PgBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "PgBackend",
      "symbolId": "lib/backends/pg-backend:PgBackend"
    },
    "cdktf.PgBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PgBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/pg-backend.ts",
        "line": 44
      },
      "name": "PgBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 45
          },
          "name": "connStr",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 46
          },
          "name": "schemaName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/pg-backend.ts",
            "line": 47
          },
          "name": "skipSchemaCreation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/backends/pg-backend:PgBackendConfig"
    },
    "cdktf.Postcondition": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Terraform checks a postcondition after evaluating the object it is associated with."
      },
      "fqn": "cdktf.Postcondition",
      "interfaces": [
        "cdktf.TerraformCondition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-conditions.ts",
        "line": 27
      },
      "name": "Postcondition",
      "symbolId": "lib/terraform-conditions:Postcondition"
    },
    "cdktf.Precondition": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Terraform checks a precondition before evaluating the object it is associated with."
      },
      "fqn": "cdktf.Precondition",
      "interfaces": [
        "cdktf.TerraformCondition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-conditions.ts",
        "line": 22
      },
      "name": "Precondition",
      "symbolId": "lib/terraform-conditions:Precondition"
    },
    "cdktf.PrefixedRemoteWorkspaces": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.PrefixedRemoteWorkspaces",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 65
        },
        "parameters": [
          {
            "name": "prefix",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IRemoteWorkspace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 64
      },
      "name": "PrefixedRemoteWorkspaces",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 65
          },
          "name": "prefix",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:PrefixedRemoteWorkspaces"
    },
    "cdktf.RemoteBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/remote-backend.ts",
          "line": 14
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.RemoteBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 27
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 18
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 22
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformBackend",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "RemoteBackend",
      "symbolId": "lib/backends/remote-backend:RemoteBackend"
    },
    "cdktf.RemoteBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.RemoteBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/remote-backend.ts",
        "line": 49
      },
      "name": "RemoteBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 51
          },
          "name": "organization",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 53
          },
          "name": "workspaces",
          "type": {
            "fqn": "cdktf.IRemoteWorkspace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 50
          },
          "name": "hostname",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/remote-backend.ts",
            "line": 52
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/remote-backend:RemoteBackendConfig"
    },
    "cdktf.RemoteExecProvisioner": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "This can be used to run a configuration management tool, bootstrap into a cluster, etc\nThe remote-exec provisioner requires a connection and supports both ssh and winrm.\n\nSee {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/remote-exec remote-exec}",
        "stability": "experimental",
        "summary": "The remote-exec provisioner invokes a script on a remote resource after it is created."
      },
      "fqn": "cdktf.RemoteExecProvisioner",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 318
      },
      "name": "RemoteExecProvisioner",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 319
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "A connection must be provided here or in the parent resource.",
            "stability": "experimental",
            "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 345
          },
          "name": "connection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "cdktf.SSHProvisionerConnection"
                },
                {
                  "fqn": "cdktf.WinrmProvisionerConnection"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "They are executed in the order they are provided.\nThis cannot be provided with script or scripts.",
            "stability": "experimental",
            "summary": "This is a list of command strings."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 326
          },
          "name": "inline",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This cannot be provided with inline or scripts.",
            "stability": "experimental",
            "summary": "This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 332
          },
          "name": "script",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "They are executed in the order they are provided.\nThis cannot be provided with inline or script.",
            "stability": "experimental",
            "summary": "This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 339
          },
          "name": "scripts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-provisioner:RemoteExecProvisioner"
    },
    "cdktf.ResolveOptions": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way.",
        "stability": "experimental",
        "summary": "Options to the resolve() operation."
      },
      "fqn": "cdktf.ResolveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 319
      },
      "name": "ResolveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The resolver to apply to any resolvable tokens found."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 328
          },
          "name": "resolver",
          "type": {
            "fqn": "cdktf.ITokenResolver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scope from which resolution is performed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 323
          },
          "name": "scope",
          "type": {
            "fqn": "constructs.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether the resolution is being executed during the prepare phase or not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 334
          },
          "name": "preparing",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/tokens/token:ResolveOptions"
    },
    "cdktf.Resource": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "deprecated": "- Please use Construct from the constructs package instead.",
        "stability": "deprecated",
        "summary": "A construct which represents a resource."
      },
      "fqn": "cdktf.Resource",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.IResource"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/resource.ts",
        "line": 21
      },
      "name": "Resource",
      "properties": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "The stack in which this resource is defined."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resource.ts",
            "line": 22
          },
          "name": "stack",
          "overrides": "cdktf.IResource",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        }
      ],
      "symbolId": "lib/resource:Resource"
    },
    "cdktf.S3Backend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.S3Backend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/s3-backend.ts",
          "line": 13
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.S3BackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 21
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 17
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "S3Backend",
      "symbolId": "lib/backends/s3-backend:S3Backend"
    },
    "cdktf.S3BackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "This backend\nalso supports state locking and consistency checking via Dynamo DB, which\ncan be enabled by setting the dynamodb_table field to an existing DynamoDB\ntable name. A single DynamoDB table can be used to lock multiple remote\nstate files. Terraform generates key names that include the values of the\nbucket and key variables.\n\nWarning! It is highly recommended that you enable Bucket Versioning on the\nS3 bucket to allow for state recovery in the case of accidental deletions\nand human error.\n\nRead more about this backend in the Terraform docs:\nhttps://developer.hashicorp.com/terraform/language/settings/backends/s3",
        "stability": "experimental",
        "summary": "Stores the state as a given key in a given bucket on Amazon S3."
      },
      "fqn": "cdktf.S3BackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/s3-backend.ts",
        "line": 59
      },
      "name": "S3BackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the S3 Bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 63
          },
          "name": "bucket",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key",
            "stability": "experimental",
            "summary": "Path to the state file inside the S3 Bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 68
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config).",
            "stability": "experimental",
            "summary": "(Optional) AWS access key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 95
          },
          "name": "accessKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Canned ACL to be applied to the state file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 87
          },
          "name": "acl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 138
          },
          "name": "assumeRolePolicy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 142
          },
          "name": "assumeRolePolicyArns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Map of assume role session tags."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 146
          },
          "name": "assumeRoleTags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 150
          },
          "name": "assumeRoleTransitiveTagKeys",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Custom endpoint for the AWS DynamoDB API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 168
          },
          "name": "dynamodbEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled.",
            "stability": "experimental",
            "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 115
          },
          "name": "dynamodbTable",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Enable server side encryption of the state file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 83
          },
          "name": "encrypt",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Custom endpoint for the AWS S3 API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 79
          },
          "name": "endpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) External identifier to use when assuming the role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 154
          },
          "name": "externalId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 183
          },
          "name": "forcePathStyle",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 173
          },
          "name": "iamEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key.",
            "stability": "experimental",
            "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 109
          },
          "name": "kmsKeyId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to 5.",
            "stability": "experimental",
            "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 208
          },
          "name": "maxRetries",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 121
          },
          "name": "profile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables.",
            "stability": "experimental",
            "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 74
          },
          "name": "region",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 134
          },
          "name": "roleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)",
            "stability": "experimental",
            "summary": "(Optional) AWS secret access key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 103
          },
          "name": "secretKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Session name to use when assuming the role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 158
          },
          "name": "sessionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Defaults to ~/.aws/credentials.",
            "stability": "experimental",
            "summary": "(Optional) Path to the AWS shared credentials file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 125
          },
          "name": "sharedCredentialsFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Skip credentials validation via the STS API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 187
          },
          "name": "skipCredentialsValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Skip usage of EC2 Metadata API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 195
          },
          "name": "skipMetadataApiCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "(Optional) Skip validation of provided region name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 191
          },
          "name": "skipRegionValidation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate.",
            "stability": "experimental",
            "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 203
          },
          "name": "sseCustomerKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 178
          },
          "name": "stsEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable.",
            "stability": "experimental",
            "summary": "(Optional) Multi-Factor Authentication (MFA) token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 130
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This is only relevant when using a non-default workspace. Defaults to env:",
            "stability": "experimental",
            "summary": "(Optional) Prefix applied to the state path inside the bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/s3-backend.ts",
            "line": 163
          },
          "name": "workspaceKeyPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/s3-backend:S3BackendConfig"
    },
    "cdktf.SSHProvisionerConnection": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "Refer to {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/connection connection}",
        "stability": "experimental",
        "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
      },
      "fqn": "cdktf.SSHProvisionerConnection",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 11
      },
      "name": "SSHProvisionerConnection",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The address of the resource to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 34
          },
          "name": "host",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified.",
            "stability": "experimental",
            "summary": "The connection type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 17
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "On Windows the only supported SSH authentication agent is Pageant.",
            "stability": "experimental",
            "summary": "Set to false to disable using ssh-agent to authenticate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 75
          },
          "name": "agent",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The preferred identity from the ssh agent for authentication."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 80
          },
          "name": "agentIdentity",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The certificate argument must be used in conjunction with a bastion_private_key.\nThese can be loaded from a file on disk using the the file function.",
            "stability": "experimental",
            "summary": "The contents of a signed CA Certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 133
          },
          "name": "bastionCertificate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The provisioner will connect to bastion_host first, and then connect from there to host.",
            "stability": "experimental",
            "summary": "Setting this enables the bastion Host connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 100
          },
          "name": "bastionHost",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The public key from the remote host or the signing CA, used to verify the host connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 105
          },
          "name": "bastionHostKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The password to use for the bastion host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 120
          },
          "name": "bastionPassword",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The port to use connect to the bastion host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 110
          },
          "name": "bastionPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "These can be loaded from a file on disk using the file function.",
            "stability": "experimental",
            "summary": "The contents of an SSH key file to use for the bastion host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 126
          },
          "name": "bastionPrivateKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The user for the connection to the bastion host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 115
          },
          "name": "bastionUser",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "The certificate argument must be used in conjunction with a private_key.\nThese can be loaded from a file on disk using the the file function.",
            "stability": "experimental",
            "summary": "The contents of a signed CA Certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 69
          },
          "name": "certificate",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The public key from the remote host or the signing CA, used to verify the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 85
          },
          "name": "hostKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The password to use for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 29
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "22",
            "stability": "experimental",
            "summary": "The port to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 41
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "These can be loaded from a file on disk using the file function.\nThis takes preference over password if provided.",
            "stability": "experimental",
            "summary": "The contents of an SSH key to use for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 62
          },
          "name": "privateKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This host will be connected to first, and then the host or bastion_host connection will be made from there.",
            "stability": "experimental",
            "summary": "Setting this enables the SSH over HTTP connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 144
          },
          "name": "proxyHost",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The port to use connect to the proxy host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 149
          },
          "name": "proxyPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ssh connection also supports the following fields to facilitate connections by SSH over HTTP proxy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 138
          },
          "name": "proxyScheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server.",
            "stability": "experimental",
            "summary": "The username to use connect to the private proxy host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 155
          },
          "name": "proxyUserName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server.",
            "stability": "experimental",
            "summary": "The password to use connect to the private proxy host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 161
          },
          "name": "proxyUserPassword",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Refer to {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}",
            "stability": "experimental",
            "summary": "The path used to copy scripts meant for remote execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 55
          },
          "name": "scriptPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "unix",
            "remarks": "Valid values are \"windows\" and \"unix\".\nIf the platform is set to windows, the default script_path is c:\\windows\\temp\\terraform_%RAND%.cmd, assuming the SSH default shell is cmd.exe.\nIf the SSH default shell is PowerShell, set script_path to \"c:/windows/temp/terraform_%RAND%.ps1\"",
            "stability": "experimental",
            "summary": "The target platform to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 94
          },
          "name": "targetPlatform",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5m",
            "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)",
            "stability": "experimental",
            "summary": "The timeout to wait for the connection to become available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 49
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "root",
            "stability": "experimental",
            "summary": "The user to use for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 24
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provisioner:SSHProvisionerConnection"
    },
    "cdktf.StackAnnotation": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StackAnnotation",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 8
      },
      "name": "StackAnnotation",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 9
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 10
          },
          "name": "level",
          "type": {
            "fqn": "cdktf.AnnotationMetadataEntryType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 11
          },
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 12
          },
          "name": "stacktrace",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/manifest:StackAnnotation"
    },
    "cdktf.StackManifest": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StackManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/manifest.ts",
        "line": 14
      },
      "name": "StackManifest",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 19
          },
          "name": "annotations",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.StackAnnotation"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 16
          },
          "name": "constructPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 20
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 15
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 17
          },
          "name": "synthesizedStackPath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/manifest.ts",
            "line": 18
          },
          "name": "workingDirectory",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/manifest:StackManifest"
    },
    "cdktf.StringConcat": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Drops 'undefined's.",
        "stability": "experimental",
        "summary": "Converts all fragments to strings and concats those."
      },
      "fqn": "cdktf.StringConcat",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "cdktf.IFragmentConcatenator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/resolvable.ts",
        "line": 149
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Concatenates string fragments."
          },
          "locationInModule": {
            "filename": "lib/tokens/resolvable.ts",
            "line": 153
          },
          "name": "join",
          "overrides": "cdktf.IFragmentConcatenator",
          "parameters": [
            {
              "name": "left",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "right",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "StringConcat",
      "symbolId": "lib/tokens/resolvable:StringConcat"
    },
    "cdktf.StringListList": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringListList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 314
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 313
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 322
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "StringListList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 316
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 315
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 317
          },
          "name": "wrapsSet",
          "overrides": "cdktf.ComplexList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:StringListList"
    },
    "cdktf.StringListMap": {
      "assembly": "cdktf",
      "base": "cdktf.ComplexMap",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringListMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 593
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 592
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 600
          },
          "name": "get",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "StringListMap",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 595
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 594
          },
          "name": "terraformResource",
          "overrides": "cdktf.ComplexMap",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:StringListMap"
    },
    "cdktf.StringMap": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringMap",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 111
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable",
        "cdktf.IResolvable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 126
          },
          "name": "computeFqn",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 118
          },
          "name": "lookup",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Produce the Token's value at resolution time."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 38
          },
          "name": "resolve",
          "overrides": "cdktf.IResolvable",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns a reversible string representation.",
            "stability": "experimental",
            "summary": "Return a string representation of this resolvable object."
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 42
          },
          "name": "toString",
          "overrides": "cdktf.IResolvable",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "StringMap",
      "properties": [
        {
          "docs": {
            "remarks": "If this returns an empty array the stack will not be attached.",
            "stability": "experimental",
            "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 13
          },
          "name": "creationStack",
          "overrides": "cdktf.IResolvable",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 29
          },
          "name": "fqn",
          "overrides": "cdktf.ITerraformAddressable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 113
          },
          "name": "terraformAttribute",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 112
          },
          "name": "terraformResource",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:StringMap"
    },
    "cdktf.StringMapList": {
      "assembly": "cdktf",
      "base": "cdktf.MapList",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.StringMapList",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/complex-computed-list.ts",
          "line": 533
        },
        "parameters": [
          {
            "name": "terraformResource",
            "type": {
              "fqn": "cdktf.IInterpolatingParent"
            }
          },
          {
            "name": "terraformAttribute",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "wrapsSet",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/complex-computed-list.ts",
        "line": 532
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 541
          },
          "name": "get",
          "parameters": [
            {
              "name": "index",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.StringMap"
            }
          }
        }
      ],
      "name": "StringMapList",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 535
          },
          "name": "terraformAttribute",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 534
          },
          "name": "terraformResource",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "fqn": "cdktf.IInterpolatingParent"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/complex-computed-list.ts",
            "line": 536
          },
          "name": "wrapsSet",
          "overrides": "cdktf.MapList",
          "protected": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/complex-computed-list:StringMapList"
    },
    "cdktf.SwiftBackend": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformBackend",
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.SwiftBackend",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/backends/swift-backend.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "cdktf.SwiftBackendConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 23
          },
          "name": "getRemoteStateDataSource",
          "overrides": "cdktf.TerraformBackend",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "_fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 19
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformBackend",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "SwiftBackend",
      "symbolId": "lib/backends/swift-backend:SwiftBackend"
    },
    "cdktf.SwiftBackendConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "deprecated": "CDK for Terraform no longer supports the swift backend. Terraform deprecated swift in v1.2.3 and removed it in v1.3.",
        "stability": "deprecated"
      },
      "fqn": "cdktf.SwiftBackendConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/backends/swift-backend.ts",
        "line": 48
      },
      "name": "SwiftBackendConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 51
          },
          "name": "container",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 56
          },
          "name": "applicationCredentialId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 57
          },
          "name": "applicationCredentialName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 58
          },
          "name": "applicationCredentialSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 74
          },
          "name": "archiveContainer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 49
          },
          "name": "authUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 71
          },
          "name": "cacertFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 72
          },
          "name": "cert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 50
          },
          "name": "cloud",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 69
          },
          "name": "defaultDomain",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 63
          },
          "name": "domainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 64
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 75
          },
          "name": "expireAfter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 70
          },
          "name": "insecure",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 73
          },
          "name": "key",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 55
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 68
          },
          "name": "projectDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 67
          },
          "name": "projectDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 60
          },
          "name": "regionName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 52
          },
          "name": "stateName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 61
          },
          "name": "tenantId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 62
          },
          "name": "tenantName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 59
          },
          "name": "token",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 66
          },
          "name": "userDomainId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 65
          },
          "name": "userDomainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 54
          },
          "name": "userId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/backends/swift-backend.ts",
            "line": 53
          },
          "name": "userName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/backends/swift-backend:SwiftBackendConfig"
    },
    "cdktf.TaggedCloudWorkspaces": {
      "assembly": "cdktf",
      "base": "cdktf.CloudWorkspace",
      "docs": {
        "remarks": "You will be able to use this working directory with any workspaces that have all of the specified tags, and can use the terraform workspace commands to switch between them or create new workspaces. New workspaces will automatically have the specified tags. This option conflicts with name.",
        "stability": "experimental",
        "summary": "A set of Terraform Cloud workspace tags."
      },
      "fqn": "cdktf.TaggedCloudWorkspaces",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/backends/cloud-backend.ts",
          "line": 148
        },
        "parameters": [
          {
            "name": "tags",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/backends/cloud-backend.ts",
        "line": 147
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 151
          },
          "name": "toTerraform",
          "overrides": "cdktf.CloudWorkspace",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TaggedCloudWorkspaces",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/backends/cloud-backend.ts",
            "line": 148
          },
          "name": "tags",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/backends/cloud-backend:TaggedCloudWorkspaces"
    },
    "cdktf.TerraformAsset": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformAsset",
      "initializer": {
        "docs": {
          "remarks": "Assets copy referenced files into the stacks context for further usage in other resources.",
          "stability": "experimental",
          "summary": "A Terraform Asset takes a file or directory outside of the CDK for Terraform context and moves it into it."
        },
        "locationInModule": {
          "filename": "lib/terraform-asset.ts",
          "line": 50
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformAssetConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 35
      },
      "name": "TerraformAsset",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 119
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The path relative to the root of the terraform directory in posix format Use this property to reference the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 108
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 39
          },
          "name": "assetHash",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 41
          },
          "name": "type",
          "type": {
            "fqn": "cdktf.AssetType"
          }
        }
      ],
      "symbolId": "lib/terraform-asset:TerraformAsset"
    },
    "cdktf.TerraformAssetConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformAssetConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-asset.ts",
        "line": 16
      },
      "name": "TerraformAssetConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 18
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 22
          },
          "name": "assetHash",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-asset.ts",
            "line": 20
          },
          "name": "type",
          "optional": true,
          "type": {
            "fqn": "cdktf.AssetType"
          }
        }
      ],
      "symbolId": "lib/terraform-asset:TerraformAssetConfig"
    },
    "cdktf.TerraformBackend": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformBackend",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-backend.ts",
          "line": 12
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-backend.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 17
          },
          "name": "isBackend",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Creates a TerraformRemoteState resource that accesses this backend."
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 29
          },
          "name": "getRemoteStateDataSource",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "fromStack",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 22
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 51
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 38
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformBackend",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-backend.ts",
            "line": 12
          },
          "name": "name",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-backend:TerraformBackend"
    },
    "cdktf.TerraformCondition": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformCondition",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-conditions.ts",
        "line": 8
      },
      "name": "TerraformCondition",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "This is a boolean expression that should return true if the intended assumption or guarantee is fulfilled or false if it does not."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-conditions.ts",
            "line": 12
          },
          "name": "condition",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "This contains the text that Terraform will include as part of error messages when it detects an unmet condition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-conditions.ts",
            "line": 16
          },
          "name": "errorMessage",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-conditions:TerraformCondition"
    },
    "cdktf.TerraformCount": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Iterator for the Terraform count property."
      },
      "fqn": "cdktf.TerraformCount",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-count.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-count.ts",
            "line": 14
          },
          "name": "isTerraformCount",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-count.ts",
            "line": 11
          },
          "name": "of",
          "parameters": [
            {
              "name": "count",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformCount"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-count.ts",
            "line": 30
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-count.ts",
            "line": 26
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        }
      ],
      "name": "TerraformCount",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-count.ts",
            "line": 22
          },
          "name": "index",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/terraform-count:TerraformCount"
    },
    "cdktf.TerraformDataSource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-data-source.ts",
          "line": 39
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource",
        "cdktf.ITerraformDependable",
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-data-source.ts",
        "line": 24
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 56
          },
          "name": "isTerraformDataSource",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 102
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 74
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 96
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 70
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 66
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 78
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 90
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 62
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 84
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 160
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 124
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 148
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 131
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 106
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 28
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 29
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 34
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "cdktf.TerraformCount"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 33
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 37
          },
          "name": "forEach",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 36
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-data-source.ts",
            "line": 35
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-data-source:TerraformDataSource"
    },
    "cdktf.TerraformElement": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElement",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-element.ts",
          "line": 34
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "elementType",
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 52
          },
          "name": "isTerraformElement",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 112
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Overrides the auto-generated logical ID with a specific ID."
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 93
          },
          "name": "overrideLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The new logical ID to use for this stack element."
              },
              "name": "newLogicalId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 104
          },
          "name": "resetOverrideLogicalId"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 60
          },
          "name": "toMetadata",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 56
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformElement",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 48
          },
          "name": "cdktfStack",
          "type": {
            "fqn": "cdktf.TerraformStack"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 138
          },
          "name": "constructNodeMetadata",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 66
          },
          "name": "fqn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 78
          },
          "name": "friendlyUniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 19
          },
          "name": "rawOverrides",
          "protected": true,
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-element:TerraformElement"
    },
    "cdktf.TerraformElementMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformElementMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-element.ts",
        "line": 11
      },
      "name": "TerraformElementMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 12
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 14
          },
          "name": "stackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-element.ts",
            "line": 13
          },
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-element:TerraformElementMetadata"
    },
    "cdktf.TerraformHclModule": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformModule",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-hcl-module.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformHclModuleConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 12
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 32
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 40
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 44
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 36
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 25
          },
          "name": "set",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 48
          },
          "name": "synthesizeAttributes",
          "overrides": "cdktf.TerraformModule",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "TerraformHclModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 21
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-hcl-module:TerraformHclModule"
    },
    "cdktf.TerraformHclModuleConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformHclModuleConfig",
      "interfaces": [
        "cdktf.TerraformModuleConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-hcl-module.ts",
        "line": 7
      },
      "name": "TerraformHclModuleConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-hcl-module.ts",
            "line": 8
          },
          "name": "variables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-hcl-module:TerraformHclModuleConfig"
    },
    "cdktf.TerraformIterator": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformIterator",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "interfaces": [
        "cdktf.ITerraformIterator"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-iterator.ts",
        "line": 54
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a new iterator from a list."
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 63
          },
          "name": "fromList",
          "parameters": [
            {
              "name": "list",
              "type": {
                "union": {
                  "types": [
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.IResolvable"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "number"
                        },
                        "kind": "array"
                      }
                    },
                    {
                      "fqn": "cdktf.ComplexList"
                    },
                    {
                      "fqn": "cdktf.StringMapList"
                    },
                    {
                      "fqn": "cdktf.NumberMapList"
                    },
                    {
                      "fqn": "cdktf.BooleanMapList"
                    },
                    {
                      "fqn": "cdktf.AnyMapList"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "union": {
                            "types": [
                              {
                                "primitive": "boolean"
                              },
                              {
                                "fqn": "cdktf.IResolvable"
                              }
                            ]
                          }
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.ListTerraformIterator"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a new iterator from a map."
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 72
          },
          "name": "fromMap",
          "parameters": [
            {
              "name": "map",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.ComplexMap"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "map"
                      }
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "map"
                      }
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "number"
                        },
                        "kind": "map"
                      }
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "boolean"
                        },
                        "kind": "map"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.MapTerraformIterator"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 217
          },
          "name": "dynamic",
          "parameters": [
            {
              "name": "attributes",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as any",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 111
          },
          "name": "getAny",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a map of any",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 167
          },
          "name": "getAnyMap",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a boolean",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 103
          },
          "name": "getBoolean",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a map of booleans",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 159
          },
          "name": "getBooleanMap",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a (string) list",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 119
          },
          "name": "getList",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a map",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 135
          },
          "name": "getMap",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a number",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 95
          },
          "name": "getNumber",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a number list",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 127
          },
          "name": "getNumberList",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a map of numbers",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 151
          },
          "name": "getNumberMap",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a string",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 87
          },
          "name": "getString",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "returns": "the given attribute of the current item iterated over as a map of strings",
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-iterator.ts",
            "line": 143
          },
          "name": "getStringMap",
          "parameters": [
            {
              "docs": {
                "summary": "name of the property to retrieve."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "TerraformIterator",
      "symbolId": "lib/terraform-iterator:TerraformIterator"
    },
    "cdktf.TerraformLocal": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformLocal",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-local.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "expression",
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-local.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 74
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "returns": "a string token referencing the value of this local",
            "stability": "experimental",
            "summary": "Returns a string representation of this construct."
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 89
          },
          "name": "toString",
          "overrides": "constructs.Construct",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 67
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformLocal",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 55
          },
          "name": "asAnyMap",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 59
          },
          "name": "asBoolean",
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 51
          },
          "name": "asBooleanMap",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "boolean"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 39
          },
          "name": "asList",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 35
          },
          "name": "asNumber",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 47
          },
          "name": "asNumberMap",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 31
          },
          "name": "asString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 43
          },
          "name": "asStringMap",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-local.ts",
            "line": 23
          },
          "name": "expression",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/terraform-local:TerraformLocal"
    },
    "cdktf.TerraformMetaArguments": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformMetaArguments",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 51
      },
      "name": "TerraformMetaArguments",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 60
          },
          "name": "connection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "cdktf.SSHProvisionerConnection"
                },
                {
                  "fqn": "cdktf.WinrmProvisionerConnection"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 53
          },
          "name": "count",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "cdktf.TerraformCount"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 52
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 56
          },
          "name": "forEach",
          "optional": true,
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 55
          },
          "name": "lifecycle",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 54
          },
          "name": "provider",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 57
          },
          "name": "provisioners",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.FileProvisioner"
                    },
                    {
                      "fqn": "cdktf.LocalExecProvisioner"
                    },
                    {
                      "fqn": "cdktf.RemoteExecProvisioner"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformMetaArguments"
    },
    "cdktf.TerraformModule": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModule",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-module.ts",
          "line": 42
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "cdktf.TerraformModuleConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformDependable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 91
          },
          "name": "addProvider",
          "parameters": [
            {
              "name": "provider",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 83
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 74
          },
          "name": "interpolationForOutput",
          "parameters": [
            {
              "name": "moduleOutput",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 70
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 131
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 99
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformModule",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 35
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 87
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 40
          },
          "name": "skipAssetCreationFromLocalModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 36
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 38
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 39
          },
          "name": "forEach",
          "optional": true,
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModule"
    },
    "cdktf.TerraformModuleConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleConfig",
      "interfaces": [
        "cdktf.TerraformModuleUserConfig"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 20
      },
      "name": "TerraformModuleConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 21
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 22
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModuleConfig"
    },
    "cdktf.TerraformModuleProvider": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 25
      },
      "name": "TerraformModuleProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 27
          },
          "name": "moduleAlias",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 26
          },
          "name": "provider",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModuleProvider"
    },
    "cdktf.TerraformModuleUserConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformModuleUserConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-module.ts",
        "line": 13
      },
      "name": "TerraformModuleUserConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 15
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 16
          },
          "name": "forEach",
          "optional": true,
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 14
          },
          "name": "providers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.TerraformProvider"
                    },
                    {
                      "fqn": "cdktf.TerraformModuleProvider"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-module.ts",
            "line": 17
          },
          "name": "skipAssetCreationFromLocalModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-module:TerraformModuleUserConfig"
    },
    "cdktf.TerraformOutput": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutput",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-output.ts",
          "line": 38
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformOutputConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 50
          },
          "name": "isTerraformOutput",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 97
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 117
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 106
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformOutput",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 54
          },
          "name": "staticId",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 32
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 35
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 33
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 36
          },
          "name": "precondition",
          "optional": true,
          "type": {
            "fqn": "cdktf.Precondition"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 34
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-output:TerraformOutput"
    },
    "cdktf.TerraformOutputConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformOutputConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-output.ts",
        "line": 15
      },
      "name": "TerraformOutputConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 16
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 19
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.ITerraformDependable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 17
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 27
          },
          "name": "precondition",
          "optional": true,
          "type": {
            "fqn": "cdktf.Precondition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 18
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-output.ts",
            "line": 26
          },
          "name": "staticId",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/terraform-output:TerraformOutputConfig"
    },
    "cdktf.TerraformProvider": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-provider.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformProviderConfig"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 18
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 32
          },
          "name": "isTerraformProvider",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 58
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 90
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 65
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformProvider",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 47
          },
          "name": "fqn",
          "overrides": "cdktf.TerraformElement",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 53
          },
          "name": "metaAttributes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 19
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 20
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 21
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 38
          },
          "name": "alias",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provider:TerraformProvider"
    },
    "cdktf.TerraformProviderConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProviderConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provider.ts",
        "line": 11
      },
      "name": "TerraformProviderConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 12
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 13
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provider.ts",
            "line": 14
          },
          "name": "terraformProviderSource",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provider:TerraformProviderConfig"
    },
    "cdktf.TerraformProviderGeneratorMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformProviderGeneratorMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 63
      },
      "name": "TerraformProviderGeneratorMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 64
          },
          "name": "providerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 66
          },
          "name": "providerVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 65
          },
          "name": "providerVersionConstraint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformProviderGeneratorMetadata"
    },
    "cdktf.TerraformRemoteState": {
      "abstract": true,
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformRemoteState",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-remote-state.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "backend",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.DataTerraformRemoteStateConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-remote-state.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 48
          },
          "name": "get",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 44
          },
          "name": "getBoolean",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 40
          },
          "name": "getList",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 36
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 32
          },
          "name": "getString",
          "parameters": [
            {
              "name": "output",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 86
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 69
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformRemoteState",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-remote-state.ts",
            "line": 21
          },
          "name": "tfResourceType",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-remote-state:TerraformRemoteState"
    },
    "cdktf.TerraformResource": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-resource.ts",
          "line": 94
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformResourceConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformResource",
        "cdktf.ITerraformDependable",
        "cdktf.IInterpolatingParent"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 75
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 113
          },
          "name": "isTerraformResource",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 159
          },
          "name": "getAnyMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 131
          },
          "name": "getBooleanAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 153
          },
          "name": "getBooleanMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 127
          },
          "name": "getListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 123
          },
          "name": "getNumberAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 135
          },
          "name": "getNumberListAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 147
          },
          "name": "getNumberMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 119
          },
          "name": "getStringAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 141
          },
          "name": "getStringMapAttribute",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 226
          },
          "name": "interpolationForAttribute",
          "overrides": "cdktf.ITerraformResource",
          "parameters": [
            {
              "name": "terraformAttribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 181
          },
          "name": "synthesizeAttributes",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 214
          },
          "name": "toMetadata",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds this resource to the terraform JSON output."
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 188
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformResource",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 163
          },
          "name": "terraformMetaArguments",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 79
          },
          "name": "terraformResourceType",
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 80
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 89
          },
          "name": "connection",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "cdktf.SSHProvisionerConnection"
                },
                {
                  "fqn": "cdktf.WinrmProvisionerConnection"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 85
          },
          "name": "count",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "cdktf.TerraformCount"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 84
          },
          "name": "dependsOn",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 88
          },
          "name": "forEach",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.ITerraformIterator"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 87
          },
          "name": "lifecycle",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformResourceLifecycle"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 86
          },
          "name": "provider",
          "optional": true,
          "overrides": "cdktf.ITerraformResource",
          "type": {
            "fqn": "cdktf.TerraformProvider"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 90
          },
          "name": "provisioners",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "fqn": "cdktf.FileProvisioner"
                    },
                    {
                      "fqn": "cdktf.LocalExecProvisioner"
                    },
                    {
                      "fqn": "cdktf.RemoteExecProvisioner"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResource"
    },
    "cdktf.TerraformResourceConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceConfig",
      "interfaces": [
        "cdktf.TerraformMetaArguments"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 69
      },
      "name": "TerraformResourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 70
          },
          "name": "terraformResourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 71
          },
          "name": "terraformGeneratorMetadata",
          "optional": true,
          "type": {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata"
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResourceConfig"
    },
    "cdktf.TerraformResourceLifecycle": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformResourceLifecycle",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-resource.ts",
        "line": 42
      },
      "name": "TerraformResourceLifecycle",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 43
          },
          "name": "createBeforeDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 45
          },
          "name": "ignoreChanges",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "array"
                  }
                },
                {
                  "primitive": "string"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 48
          },
          "name": "postcondition",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.Postcondition"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 47
          },
          "name": "precondition",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.Precondition"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 44
          },
          "name": "preventDestroy",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-resource.ts",
            "line": 46
          },
          "name": "replaceTriggeredBy",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "fqn": "cdktf.ITerraformDependable"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-resource:TerraformResourceLifecycle"
    },
    "cdktf.TerraformSelf": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "References create dependencies, and referring to a resource by name within its own block would create a dependency cycle.\nInstead, expressions can use the self object, which represents the connection's parent resource and has all of that resource's attributes.\nFor example, use self.public_ip to reference an aws_instance's public_ip attribute.",
        "stability": "experimental",
        "summary": "Expressions in connection blocks cannot refer to their parent resource by name."
      },
      "fqn": "cdktf.TerraformSelf",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 354
      },
      "methods": [
        {
          "docs": {
            "remarks": "Access a property on the resource like this: `getAny(\"hostPort\")`",
            "stability": "experimental",
            "summary": "Only usable within a connection block to reference the connections parent resource."
          },
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 379
          },
          "name": "getAny",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Access a property on the resource like this: `getNumber(\"hostPort\")`",
            "stability": "experimental",
            "summary": "Only usable within a connection block to reference the connections parent resource."
          },
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 371
          },
          "name": "getNumber",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Access a property on the resource like this: `getString(\"publicIp\")`",
            "stability": "experimental",
            "summary": "Only usable within a connection block to reference the connections parent resource."
          },
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 363
          },
          "name": "getString",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "TerraformSelf",
      "symbolId": "lib/terraform-provisioner:TerraformSelf"
    },
    "cdktf.TerraformStack": {
      "assembly": "cdktf",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStack",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-stack.ts",
          "line": 66
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 57
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 80
          },
          "name": "isStack",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 84
          },
          "name": "of",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformStack"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 296
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "dependency",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 142
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "By default, uses\nthe `HashedAddressingScheme` but this method can be overridden to customize\nthis behavior.",
            "stability": "experimental",
            "summary": "Returns the naming scheme used to allocate logical IDs."
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 180
          },
          "name": "allocateLogicalId",
          "parameters": [
            {
              "docs": {
                "summary": "The element for which the logical ID is allocated."
              },
              "name": "tfElement",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "constructs.Node"
                    },
                    {
                      "fqn": "cdktf.TerraformElement"
                    }
                  ]
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 194
          },
          "name": "allProviders",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "cdktf.TerraformProvider"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 289
          },
          "name": "dependsOn",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 198
          },
          "name": "ensureBackendExists",
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformBackend"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 168
          },
          "name": "getLogicalId",
          "parameters": [
            {
              "name": "tfElement",
              "type": {
                "union": {
                  "types": [
                    {
                      "fqn": "constructs.Node"
                    },
                    {
                      "fqn": "cdktf.TerraformElement"
                    }
                  ]
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 133
          },
          "name": "prepareStack"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 271
          },
          "name": "registerIncomingCrossStackReference",
          "parameters": [
            {
              "name": "fromStack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformRemoteState"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 253
          },
          "name": "registerOutgoingCrossStackReference",
          "parameters": [
            {
              "name": "identifier",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TerraformOutput"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Run all validations on the stack."
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 313
          },
          "name": "runAllValidations"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 203
          },
          "name": "toTerraform",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformStack",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 64
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformStack"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 63
          },
          "name": "synthesizer",
          "type": {
            "fqn": "cdktf.IStackSynthesizer"
          }
        }
      ],
      "symbolId": "lib/terraform-stack:TerraformStack"
    },
    "cdktf.TerraformStackMetadata": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformStackMetadata",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-stack.ts",
        "line": 28
      },
      "name": "TerraformStackMetadata",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 31
          },
          "name": "backend",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 29
          },
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 30
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-stack.ts",
            "line": 32
          },
          "name": "cloud",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-stack:TerraformStackMetadata"
    },
    "cdktf.TerraformVariable": {
      "assembly": "cdktf",
      "base": "cdktf.TerraformElement",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariable",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/terraform-variable.ts",
          "line": 112
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "config",
            "type": {
              "fqn": "cdktf.TerraformVariableConfig"
            }
          }
        ]
      },
      "interfaces": [
        "cdktf.ITerraformAddressable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 101
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 147
          },
          "name": "addValidation",
          "parameters": [
            {
              "name": "validation",
              "type": {
                "fqn": "cdktf.TerraformVariableValidationConfig"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 159
          },
          "name": "synthesizeAttributes",
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        },
        {
          "docs": {
            "returns": "a string token referencing the value of this variable",
            "stability": "experimental",
            "summary": "Returns a string representation of this construct."
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 187
          },
          "name": "toString",
          "overrides": "constructs.Construct",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 173
          },
          "name": "toTerraform",
          "overrides": "cdktf.TerraformElement",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "TerraformVariable",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 135
          },
          "name": "booleanValue",
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 131
          },
          "name": "listValue",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 127
          },
          "name": "numberValue",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 123
          },
          "name": "stringValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 139
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 105
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 106
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 109
          },
          "name": "nullable",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 108
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 107
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 143
          },
          "name": "validation",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformVariableValidationConfig"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-variable:TerraformVariable"
    },
    "cdktf.TerraformVariableConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TerraformVariableConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 58
      },
      "name": "TerraformVariableConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 59
          },
          "name": "default",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 60
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 92
          },
          "name": "nullable",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 87
          },
          "name": "sensitive",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n- string\n- number\n- bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n- list(\\<TYPE\\>)\n- set(\\<TYPE\\>)\n- map(\\<TYPE\\>)\n- object({\\<ATTR NAME\\> = \\<TYPE\\>, ... })\n- tuple([\\<TYPE\\>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, refer to {@link https://developer.hashicorp.com/terraform/language/expressions/type-constraints Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type.",
            "stability": "experimental",
            "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 85
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Specify arbitrary custom validation rules for a particular variable using a validation block nested within the corresponding variable block."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 97
          },
          "name": "validation",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.TerraformVariableValidationConfig"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/terraform-variable:TerraformVariableConfig"
    },
    "cdktf.TerraformVariableValidationConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Add one or more validation blocks within the variable block to specify custom conditions."
      },
      "fqn": "cdktf.TerraformVariableValidationConfig",
      "interfaces": [
        "cdktf.TerraformCondition"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-conditions.ts",
        "line": 32
      },
      "name": "TerraformVariableValidationConfig",
      "symbolId": "lib/terraform-conditions:TerraformVariableValidationConfig"
    },
    "cdktf.Testing": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Testing utilities for cdktf applications."
      },
      "fqn": "cdktf.Testing",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 42
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 47
          },
          "name": "app",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.TestingAppConfig"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 84
          },
          "name": "enableFutureFlags",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 79
          },
          "name": "fakeCdktfJsonPath",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 136
          },
          "name": "fullSynth",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 151
          },
          "name": "renderConstructTree",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "constructs.IConstruct"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 251
          },
          "name": "setupJest",
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 73
          },
          "name": "stubVersion",
          "parameters": [
            {
              "name": "app",
              "type": {
                "fqn": "cdktf.App"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.App"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the Terraform synthesized JSON."
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 101
          },
          "name": "synth",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "cdktf.TerraformStack"
              }
            },
            {
              "name": "runValidations",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 92
          },
          "name": "synthScope",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "fqn": "cdktf.IScopeCallback"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 247
          },
          "name": "toBeValidTerraform",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 190
          },
          "name": "toHaveDataSource",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 178
          },
          "name": "toHaveDataSourceWithProperties",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "properties",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 236
          },
          "name": "toHaveProvider",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 224
          },
          "name": "toHaveProviderWithProperties",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "properties",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 213
          },
          "name": "toHaveResource",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 201
          },
          "name": "toHaveResourceWithProperties",
          "parameters": [
            {
              "name": "received",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "resourceType",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "properties",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        }
      ],
      "name": "Testing",
      "symbolId": "lib/testing/index:Testing"
    },
    "cdktf.TestingAppConfig": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.TestingAppConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/index.ts",
        "line": 24
      },
      "name": "TestingAppConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 28
          },
          "name": "enableFutureFlags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 29
          },
          "name": "fakeCdktfJsonPath",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 25
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 26
          },
          "name": "stackTraces",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/index.ts",
            "line": 27
          },
          "name": "stubVersion",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/testing/index:TestingAppConfig"
    },
    "cdktf.Token": {
      "assembly": "cdktf",
      "docs": {
        "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics.",
        "stability": "experimental",
        "summary": "Represents a special or lazily-evaluated value."
      },
      "fqn": "cdktf.Token",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a resolvable representation of the given value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 171
          },
          "name": "asAny",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 161
          },
          "name": "asAnyMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 146
          },
          "name": "asBooleanMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "boolean"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible list representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 77
          },
          "name": "asList",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 100
          },
          "name": "asMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "mapValue",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible number representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 67
          },
          "name": "asNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible list representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 90
          },
          "name": "asNumberList",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 136
          },
          "name": "asNumberMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "number"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string.",
            "stability": "experimental",
            "summary": "Return a reversible string representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 53
          },
          "name": "asString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a reversible map representation of this token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 121
          },
          "name": "asStringMap",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "cdktf.EncodingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "One of these must be true:\n\n- `obj` is an IResolvable\n- `obj` is a string containing at least one encoded `IResolvable`\n- `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables.",
            "stability": "experimental",
            "summary": "Returns true if obj represents an unresolved value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 38
          },
          "name": "isUnresolved",
          "parameters": [
            {
              "docs": {
                "summary": "The object to test."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Note: This is different than `undefined`, `nil`, `None` or similar\nas it will end up in the Terraform config and can be used to explicitly\nnot set an attribute (which is sometimes required by Terraform providers)",
            "returns": "a Token resolving to `null` as understood by Terraform",
            "stability": "experimental",
            "summary": "Return a Token containing a `null` value."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 184
          },
          "name": "nullValue",
          "returns": {
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        }
      ],
      "name": "Token",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Any map token representation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 156
          },
          "name": "ANY_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Number Map token value representation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 131
          },
          "name": "NUMBER_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "String Map token value representation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 116
          },
          "name": "STRING_MAP_TOKEN_VALUE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/tokens/token:Token"
    },
    "cdktf.Tokenization": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Less oft-needed functions to manipulate Tokens."
      },
      "fqn": "cdktf.Tokenization",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/token.ts",
        "line": 194
      },
      "methods": [
        {
          "docs": {
            "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject.",
            "stability": "experimental",
            "summary": "Return whether the given object is an IResolvable object."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 284
          },
          "name": "isResolvable",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected.",
            "stability": "experimental",
            "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 269
          },
          "name": "resolve",
          "parameters": [
            {
              "docs": {
                "summary": "The object to resolve."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "summary": "Prefix key path components for diagnostics."
              },
              "name": "options",
              "type": {
                "fqn": "cdktf.ResolveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reverse any value into Resolvables, if possible."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 198
          },
          "name": "reverse",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "cdktf.IResolvable"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a list."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 244
          },
          "name": "reverseList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a map."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 258
          },
          "name": "reverseMap",
          "parameters": [
            {
              "name": "m",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a number."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 237
          },
          "name": "reverseNumber",
          "parameters": [
            {
              "name": "n",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a Tokenized value from a list."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 251
          },
          "name": "reverseNumberList",
          "parameters": [
            {
              "name": "l",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "number"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "cdktf.IResolvable"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Un-encode a string potentially containing encoded tokens."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 230
          },
          "name": "reverseString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is.",
            "stability": "experimental",
            "summary": "Stringify a number directly or lazily if it's a Token."
          },
          "locationInModule": {
            "filename": "lib/tokens/token.ts",
            "line": 295
          },
          "name": "stringifyNumber",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Tokenization",
      "symbolId": "lib/tokens/token:Tokenization"
    },
    "cdktf.TokenizedStringFragments": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Fragments of a concatenated string containing stringified Tokens."
      },
      "fqn": "cdktf.TokenizedStringFragments",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/tokens/string-fragments.ts",
        "line": 30
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 85
          },
          "name": "addEscape",
          "parameters": [
            {
              "name": "kind",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an intrinsic fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 81
          },
          "name": "addIntrinsic",
          "parameters": [
            {
              "docs": {
                "summary": "the intrinsic value to add."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a literal fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 65
          },
          "name": "addLiteral",
          "parameters": [
            {
              "docs": {
                "summary": "the literal to add."
              },
              "name": "lit",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a token fragment."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 73
          },
          "name": "addToken",
          "parameters": [
            {
              "docs": {
                "summary": "the token to add."
              },
              "name": "token",
              "type": {
                "fqn": "cdktf.IResolvable"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 89
          },
          "name": "concat",
          "parameters": [
            {
              "name": "other",
              "type": {
                "fqn": "cdktf.TokenizedStringFragments"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If there are any",
            "stability": "experimental",
            "summary": "Combine the string fragments using the given joiner."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 194
          },
          "name": "join",
          "parameters": [
            {
              "name": "concat",
              "type": {
                "fqn": "cdktf.IFragmentConcatenator"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Apply a transformation function to all tokens in the string."
          },
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 149
          },
          "name": "mapTokens",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "cdktf.IResolveContext"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "cdktf.TokenizedStringFragments"
            }
          }
        }
      ],
      "name": "TokenizedStringFragments",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all escape fragments from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 135
          },
          "name": "escapes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 50
          },
          "name": "firstValue",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all intrinsic fragments from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 122
          },
          "name": "intrinsic",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the number of fragments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 57
          },
          "name": "length",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all literals from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 109
          },
          "name": "literals",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all Tokens from this string."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 96
          },
          "name": "tokens",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "cdktf.IResolvable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the first token."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/tokens/string-fragments.ts",
            "line": 39
          },
          "name": "firstToken",
          "optional": true,
          "type": {
            "fqn": "cdktf.IResolvable"
          }
        }
      ],
      "symbolId": "lib/tokens/string-fragments:TokenizedStringFragments"
    },
    "cdktf.VariableType": {
      "abstract": true,
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.VariableType",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/terraform-variable.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 35
          },
          "name": "list",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 39
          },
          "name": "map",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 51
          },
          "name": "object",
          "parameters": [
            {
              "name": "attributes",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 43
          },
          "name": "set",
          "parameters": [
            {
              "name": "type",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 47
          },
          "name": "tuple",
          "parameters": [
            {
              "name": "elements",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true,
          "variadic": true
        }
      ],
      "name": "VariableType",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 17
          },
          "name": "ANY",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 16
          },
          "name": "BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 19
          },
          "name": "LIST",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 25
          },
          "name": "LIST_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 24
          },
          "name": "LIST_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 23
          },
          "name": "LIST_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 20
          },
          "name": "MAP",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 29
          },
          "name": "MAP_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 28
          },
          "name": "MAP_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 27
          },
          "name": "MAP_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 15
          },
          "name": "NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 21
          },
          "name": "SET",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 33
          },
          "name": "SET_BOOL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 32
          },
          "name": "SET_NUMBER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 31
          },
          "name": "SET_STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-variable.ts",
            "line": 14
          },
          "name": "STRING",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-variable:VariableType"
    },
    "cdktf.WinrmProvisionerConnection": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "remarks": "See {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/connection connection}",
        "stability": "experimental",
        "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
      },
      "fqn": "cdktf.WinrmProvisionerConnection",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/terraform-provisioner.ts",
        "line": 169
      },
      "name": "WinrmProvisionerConnection",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The address of the resource to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 192
          },
          "name": "host",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified.",
            "stability": "experimental",
            "summary": "The connection type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 175
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The CA certificate to validate against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 234
          },
          "name": "cacert",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Set to true to connect using HTTPS instead of HTTP."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 218
          },
          "name": "https",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Set to true to skip validating the HTTPS certificate chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 223
          },
          "name": "insecure",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The password to use for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 187
          },
          "name": "password",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "22",
            "stability": "experimental",
            "summary": "The port to connect to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 199
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Refer to {@link https://developer.hashicorp.com/terraform/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}",
            "stability": "experimental",
            "summary": "The path used to copy scripts meant for remote execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 213
          },
          "name": "scriptPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5m",
            "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)",
            "stability": "experimental",
            "summary": "The timeout to wait for the connection to become available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 207
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Refer to Authentication for Remote Connections in the Windows App Development documentation for more details.",
            "stability": "experimental",
            "summary": "Set to true to use NTLM authentication rather than default (basic authentication), removing the requirement for basic authentication to be enabled within the target guest."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 229
          },
          "name": "useNtlm",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "root",
            "stability": "experimental",
            "summary": "The user to use for the connection."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/terraform-provisioner.ts",
            "line": 182
          },
          "name": "user",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/terraform-provisioner:WinrmProvisionerConnection"
    },
    "cdktf.testingMatchers.AssertionReturn": {
      "assembly": "cdktf",
      "docs": {
        "stability": "experimental",
        "summary": "Class representing the contents of a return by an assertion."
      },
      "fqn": "cdktf.testingMatchers.AssertionReturn",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Create an AssertionReturn."
        },
        "locationInModule": {
          "filename": "lib/testing/matchers.ts",
          "line": 28
        },
        "parameters": [
          {
            "docs": {
              "summary": "- String message containing information about the result of the assertion."
            },
            "name": "message",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- Boolean pass denoting the success of the assertion."
            },
            "name": "pass",
            "type": {
              "primitive": "boolean"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/testing/matchers.ts",
        "line": 22
      },
      "name": "AssertionReturn",
      "namespace": "testingMatchers",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "- String message containing information about the result of the assertion."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/matchers.ts",
            "line": 28
          },
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "- Boolean pass denoting the success of the assertion."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/matchers.ts",
            "line": 28
          },
          "name": "pass",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/testing/matchers:AssertionReturn"
    },
    "cdktf.testingMatchers.TerraformConstructor": {
      "assembly": "cdktf",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "cdktf.testingMatchers.TerraformConstructor",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/testing/matchers.ts",
        "line": 9
      },
      "name": "TerraformConstructor",
      "namespace": "testingMatchers",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/testing/matchers.ts",
            "line": 10
          },
          "name": "tfResourceType",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/testing/matchers:TerraformConstructor"
    }
  },
  "version": "0.18.0",
  "fingerprint": "+5DnadpxABUrf1udr8mRvIGSf2hRc0CDlCMhZ5Ll1Ng="
}